// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.1
// source: models.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AttributeAllocationMethod int32

const (
	AttributeAllocationMethod_AttributeAllocationMethod_UNK     AttributeAllocationMethod = 0
	AttributeAllocationMethod_AttributeAllocationMethod_Roo     AttributeAllocationMethod = 1
	AttributeAllocationMethod_AttributeAllocationMethod_Point50 AttributeAllocationMethod = 2
	AttributeAllocationMethod_AttributeAllocationMethod_Point60 AttributeAllocationMethod = 3
	AttributeAllocationMethod_AttributeAllocationMethod_Point70 AttributeAllocationMethod = 4
	AttributeAllocationMethod_AttributeAllocationMethod_Maunal  AttributeAllocationMethod = 5
)

// Enum value maps for AttributeAllocationMethod.
var (
	AttributeAllocationMethod_name = map[int32]string{
		0: "AttributeAllocationMethod_UNK",
		1: "AttributeAllocationMethod_Roo",
		2: "AttributeAllocationMethod_Point50",
		3: "AttributeAllocationMethod_Point60",
		4: "AttributeAllocationMethod_Point70",
		5: "AttributeAllocationMethod_Maunal",
	}
	AttributeAllocationMethod_value = map[string]int32{
		"AttributeAllocationMethod_UNK":     0,
		"AttributeAllocationMethod_Roo":     1,
		"AttributeAllocationMethod_Point50": 2,
		"AttributeAllocationMethod_Point60": 3,
		"AttributeAllocationMethod_Point70": 4,
		"AttributeAllocationMethod_Maunal":  5,
	}
)

func (x AttributeAllocationMethod) Enum() *AttributeAllocationMethod {
	p := new(AttributeAllocationMethod)
	*p = x
	return p
}

func (x AttributeAllocationMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttributeAllocationMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_models_proto_enumTypes[0].Descriptor()
}

func (AttributeAllocationMethod) Type() protoreflect.EnumType {
	return &file_models_proto_enumTypes[0]
}

func (x AttributeAllocationMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttributeAllocationMethod.Descriptor instead.
func (AttributeAllocationMethod) EnumDescriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{0}
}

type EntityType int32

const (
	EntityType_EntityType_Unknown   EntityType = 0
	EntityType_EntityType_Character EntityType = 1
	EntityType_EntityType_Creature  EntityType = 2
	EntityType_EntityType_Other     EntityType = 3
)

// Enum value maps for EntityType.
var (
	EntityType_name = map[int32]string{
		0: "EntityType_Unknown",
		1: "EntityType_Character",
		2: "EntityType_Creature",
		3: "EntityType_Other",
	}
	EntityType_value = map[string]int32{
		"EntityType_Unknown":   0,
		"EntityType_Character": 1,
		"EntityType_Creature":  2,
		"EntityType_Other":     3,
	}
)

func (x EntityType) Enum() *EntityType {
	p := new(EntityType)
	*p = x
	return p
}

func (x EntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_models_proto_enumTypes[1].Descriptor()
}

func (EntityType) Type() protoreflect.EnumType {
	return &file_models_proto_enumTypes[1]
}

func (x EntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntityType.Descriptor instead.
func (EntityType) EnumDescriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{1}
}

type PrimaryAttributeVal int32

const (
	PrimaryAttributeVal_PrimaryAttributeVal_UNK  PrimaryAttributeVal = 0
	PrimaryAttributeVal_PrimaryAttributeVal_BOD  PrimaryAttributeVal = 1
	PrimaryAttributeVal_PrimaryAttributeVal_WILL PrimaryAttributeVal = 2
	PrimaryAttributeVal_PrimaryAttributeVal_REF  PrimaryAttributeVal = 3
	PrimaryAttributeVal_PrimaryAttributeVal_VIT  PrimaryAttributeVal = 4
	PrimaryAttributeVal_PrimaryAttributeVal_INT  PrimaryAttributeVal = 5
	PrimaryAttributeVal_PrimaryAttributeVal_LUCK PrimaryAttributeVal = 6
	PrimaryAttributeVal_PrimaryAttributeVal_TECH PrimaryAttributeVal = 7
	PrimaryAttributeVal_PrimaryAttributeVal_ATTR PrimaryAttributeVal = 8
	PrimaryAttributeVal_PrimaryAttributeVal_ESS  PrimaryAttributeVal = 9
	PrimaryAttributeVal_PrimaryAttributeVal_PER  PrimaryAttributeVal = 10
)

// Enum value maps for PrimaryAttributeVal.
var (
	PrimaryAttributeVal_name = map[int32]string{
		0:  "PrimaryAttributeVal_UNK",
		1:  "PrimaryAttributeVal_BOD",
		2:  "PrimaryAttributeVal_WILL",
		3:  "PrimaryAttributeVal_REF",
		4:  "PrimaryAttributeVal_VIT",
		5:  "PrimaryAttributeVal_INT",
		6:  "PrimaryAttributeVal_LUCK",
		7:  "PrimaryAttributeVal_TECH",
		8:  "PrimaryAttributeVal_ATTR",
		9:  "PrimaryAttributeVal_ESS",
		10: "PrimaryAttributeVal_PER",
	}
	PrimaryAttributeVal_value = map[string]int32{
		"PrimaryAttributeVal_UNK":  0,
		"PrimaryAttributeVal_BOD":  1,
		"PrimaryAttributeVal_WILL": 2,
		"PrimaryAttributeVal_REF":  3,
		"PrimaryAttributeVal_VIT":  4,
		"PrimaryAttributeVal_INT":  5,
		"PrimaryAttributeVal_LUCK": 6,
		"PrimaryAttributeVal_TECH": 7,
		"PrimaryAttributeVal_ATTR": 8,
		"PrimaryAttributeVal_ESS":  9,
		"PrimaryAttributeVal_PER":  10,
	}
)

func (x PrimaryAttributeVal) Enum() *PrimaryAttributeVal {
	p := new(PrimaryAttributeVal)
	*p = x
	return p
}

func (x PrimaryAttributeVal) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrimaryAttributeVal) Descriptor() protoreflect.EnumDescriptor {
	return file_models_proto_enumTypes[2].Descriptor()
}

func (PrimaryAttributeVal) Type() protoreflect.EnumType {
	return &file_models_proto_enumTypes[2]
}

func (x PrimaryAttributeVal) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrimaryAttributeVal.Descriptor instead.
func (PrimaryAttributeVal) EnumDescriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{2}
}

type AttackType int32

const (
	AttackType_AttackType_Unknown AttackType = 0
	AttackType_AttackType_Melee   AttackType = 1
	AttackType_AttackType_Ranged  AttackType = 2
)

// Enum value maps for AttackType.
var (
	AttackType_name = map[int32]string{
		0: "AttackType_Unknown",
		1: "AttackType_Melee",
		2: "AttackType_Ranged",
	}
	AttackType_value = map[string]int32{
		"AttackType_Unknown": 0,
		"AttackType_Melee":   1,
		"AttackType_Ranged":  2,
	}
)

func (x AttackType) Enum() *AttackType {
	p := new(AttackType)
	*p = x
	return p
}

func (x AttackType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttackType) Descriptor() protoreflect.EnumDescriptor {
	return file_models_proto_enumTypes[3].Descriptor()
}

func (AttackType) Type() protoreflect.EnumType {
	return &file_models_proto_enumTypes[3]
}

func (x AttackType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttackType.Descriptor instead.
func (AttackType) EnumDescriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{3}
}

type DefenseType int32

const (
	DefenseType_Unknown DefenseType = 0
	DefenseType_None    DefenseType = 1
	DefenseType_Dodge   DefenseType = 2
	DefenseType_Block   DefenseType = 3
	DefenseType_Parry   DefenseType = 4
)

// Enum value maps for DefenseType.
var (
	DefenseType_name = map[int32]string{
		0: "Unknown",
		1: "None",
		2: "Dodge",
		3: "Block",
		4: "Parry",
	}
	DefenseType_value = map[string]int32{
		"Unknown": 0,
		"None":    1,
		"Dodge":   2,
		"Block":   3,
		"Parry":   4,
	}
)

func (x DefenseType) Enum() *DefenseType {
	p := new(DefenseType)
	*p = x
	return p
}

func (x DefenseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DefenseType) Descriptor() protoreflect.EnumDescriptor {
	return file_models_proto_enumTypes[4].Descriptor()
}

func (DefenseType) Type() protoreflect.EnumType {
	return &file_models_proto_enumTypes[4]
}

func (x DefenseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DefenseType.Descriptor instead.
func (DefenseType) EnumDescriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{4}
}

type WoundState int32

const (
	WoundState_WoundState_Unknown  WoundState = 0
	WoundState_WoundState_None     WoundState = 1
	WoundState_WoundState_Light    WoundState = 2
	WoundState_WoundState_Serious  WoundState = 3
	WoundState_WoundState_Critical WoundState = 4
	WoundState_WoundState_Mortal   WoundState = 5
)

// Enum value maps for WoundState.
var (
	WoundState_name = map[int32]string{
		0: "WoundState_Unknown",
		1: "WoundState_None",
		2: "WoundState_Light",
		3: "WoundState_Serious",
		4: "WoundState_Critical",
		5: "WoundState_Mortal",
	}
	WoundState_value = map[string]int32{
		"WoundState_Unknown":  0,
		"WoundState_None":     1,
		"WoundState_Light":    2,
		"WoundState_Serious":  3,
		"WoundState_Critical": 4,
		"WoundState_Mortal":   5,
	}
)

func (x WoundState) Enum() *WoundState {
	p := new(WoundState)
	*p = x
	return p
}

func (x WoundState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WoundState) Descriptor() protoreflect.EnumDescriptor {
	return file_models_proto_enumTypes[5].Descriptor()
}

func (WoundState) Type() protoreflect.EnumType {
	return &file_models_proto_enumTypes[5]
}

func (x WoundState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WoundState.Descriptor instead.
func (WoundState) EnumDescriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{5}
}

type Rarity int32

const (
	Rarity_Rarity_UNK       Rarity = 0
	Rarity_Rarity_COMMON    Rarity = 1
	Rarity_Rarity_UNCOMMON  Rarity = 2
	Rarity_Rarity_RARE      Rarity = 3
	Rarity_Rarity_LEGONDARY Rarity = 4
	Rarity_Rarity_MYTHIC    Rarity = 5
	Rarity_Rarity_OTHER     Rarity = 6
)

// Enum value maps for Rarity.
var (
	Rarity_name = map[int32]string{
		0: "Rarity_UNK",
		1: "Rarity_COMMON",
		2: "Rarity_UNCOMMON",
		3: "Rarity_RARE",
		4: "Rarity_LEGONDARY",
		5: "Rarity_MYTHIC",
		6: "Rarity_OTHER",
	}
	Rarity_value = map[string]int32{
		"Rarity_UNK":       0,
		"Rarity_COMMON":    1,
		"Rarity_UNCOMMON":  2,
		"Rarity_RARE":      3,
		"Rarity_LEGONDARY": 4,
		"Rarity_MYTHIC":    5,
		"Rarity_OTHER":     6,
	}
)

func (x Rarity) Enum() *Rarity {
	p := new(Rarity)
	*p = x
	return p
}

func (x Rarity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rarity) Descriptor() protoreflect.EnumDescriptor {
	return file_models_proto_enumTypes[6].Descriptor()
}

func (Rarity) Type() protoreflect.EnumType {
	return &file_models_proto_enumTypes[6]
}

func (x Rarity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rarity.Descriptor instead.
func (Rarity) EnumDescriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{6}
}

type BooleanValue int32

const (
	BooleanValue_BooleanValue_UNK   BooleanValue = 0
	BooleanValue_BooleanValue_False BooleanValue = 1
	BooleanValue_BooleanValue_True  BooleanValue = 2
)

// Enum value maps for BooleanValue.
var (
	BooleanValue_name = map[int32]string{
		0: "BooleanValue_UNK",
		1: "BooleanValue_False",
		2: "BooleanValue_True",
	}
	BooleanValue_value = map[string]int32{
		"BooleanValue_UNK":   0,
		"BooleanValue_False": 1,
		"BooleanValue_True":  2,
	}
)

func (x BooleanValue) Enum() *BooleanValue {
	p := new(BooleanValue)
	*p = x
	return p
}

func (x BooleanValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BooleanValue) Descriptor() protoreflect.EnumDescriptor {
	return file_models_proto_enumTypes[7].Descriptor()
}

func (BooleanValue) Type() protoreflect.EnumType {
	return &file_models_proto_enumTypes[7]
}

func (x BooleanValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BooleanValue.Descriptor instead.
func (BooleanValue) EnumDescriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{7}
}

type MonetaryDenomination int32

const (
	MonetaryDenomination_MonetaryDenomination_UNK   MonetaryDenomination = 0
	MonetaryDenomination_MonetaryDenomination_CP    MonetaryDenomination = 1
	MonetaryDenomination_MonetaryDenomination_SP    MonetaryDenomination = 2
	MonetaryDenomination_MonetaryDenomination_GP    MonetaryDenomination = 3
	MonetaryDenomination_MonetaryDenomination_PP    MonetaryDenomination = 4
	MonetaryDenomination_MonetaryDenomination_OTHER MonetaryDenomination = 5
)

// Enum value maps for MonetaryDenomination.
var (
	MonetaryDenomination_name = map[int32]string{
		0: "MonetaryDenomination_UNK",
		1: "MonetaryDenomination_CP",
		2: "MonetaryDenomination_SP",
		3: "MonetaryDenomination_GP",
		4: "MonetaryDenomination_PP",
		5: "MonetaryDenomination_OTHER",
	}
	MonetaryDenomination_value = map[string]int32{
		"MonetaryDenomination_UNK":   0,
		"MonetaryDenomination_CP":    1,
		"MonetaryDenomination_SP":    2,
		"MonetaryDenomination_GP":    3,
		"MonetaryDenomination_PP":    4,
		"MonetaryDenomination_OTHER": 5,
	}
)

func (x MonetaryDenomination) Enum() *MonetaryDenomination {
	p := new(MonetaryDenomination)
	*p = x
	return p
}

func (x MonetaryDenomination) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonetaryDenomination) Descriptor() protoreflect.EnumDescriptor {
	return file_models_proto_enumTypes[8].Descriptor()
}

func (MonetaryDenomination) Type() protoreflect.EnumType {
	return &file_models_proto_enumTypes[8]
}

func (x MonetaryDenomination) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MonetaryDenomination.Descriptor instead.
func (MonetaryDenomination) EnumDescriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{8}
}

type GameTermType int32

const (
	GameTermType_GameTermType_UNK                    GameTermType = 0
	GameTermType_GameTermType_Rarity                 GameTermType = 1
	GameTermType_GameTermType_Weapon_Quality         GameTermType = 2
	GameTermType_GameTermType_Monetary_Denomintation GameTermType = 3
	GameTermType_GameTermType_Wound_state            GameTermType = 4
)

// Enum value maps for GameTermType.
var (
	GameTermType_name = map[int32]string{
		0: "GameTermType_UNK",
		1: "GameTermType_Rarity",
		2: "GameTermType_Weapon_Quality",
		3: "GameTermType_Monetary_Denomintation",
		4: "GameTermType_Wound_state",
	}
	GameTermType_value = map[string]int32{
		"GameTermType_UNK":                    0,
		"GameTermType_Rarity":                 1,
		"GameTermType_Weapon_Quality":         2,
		"GameTermType_Monetary_Denomintation": 3,
		"GameTermType_Wound_state":            4,
	}
)

func (x GameTermType) Enum() *GameTermType {
	p := new(GameTermType)
	*p = x
	return p
}

func (x GameTermType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameTermType) Descriptor() protoreflect.EnumDescriptor {
	return file_models_proto_enumTypes[9].Descriptor()
}

func (GameTermType) Type() protoreflect.EnumType {
	return &file_models_proto_enumTypes[9]
}

func (x GameTermType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameTermType.Descriptor instead.
func (GameTermType) EnumDescriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{9}
}

type Quality int32

const (
	Quality_Quality_UNK      Quality = 0
	Quality_Quality_Trash    Quality = 1
	Quality_Quality_Poor     Quality = 2
	Quality_Quality_Standard Quality = 3
	Quality_Quality_Master   Quality = 4
	Quality_Quality_Magic    Quality = 5
	Quality_Quality_Artifact Quality = 6
)

// Enum value maps for Quality.
var (
	Quality_name = map[int32]string{
		0: "Quality_UNK",
		1: "Quality_Trash",
		2: "Quality_Poor",
		3: "Quality_Standard",
		4: "Quality_Master",
		5: "Quality_Magic",
		6: "Quality_Artifact",
	}
	Quality_value = map[string]int32{
		"Quality_UNK":      0,
		"Quality_Trash":    1,
		"Quality_Poor":     2,
		"Quality_Standard": 3,
		"Quality_Master":   4,
		"Quality_Magic":    5,
		"Quality_Artifact": 6,
	}
)

func (x Quality) Enum() *Quality {
	p := new(Quality)
	*p = x
	return p
}

func (x Quality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Quality) Descriptor() protoreflect.EnumDescriptor {
	return file_models_proto_enumTypes[10].Descriptor()
}

func (Quality) Type() protoreflect.EnumType {
	return &file_models_proto_enumTypes[10]
}

func (x Quality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Quality.Descriptor instead.
func (Quality) EnumDescriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{10}
}

type ActionType int32

const (
	ActionType_ActionType_Unknown            ActionType = 0
	ActionType_ActionType_Standard           ActionType = 1
	ActionType_ActionType_Defensive_Reaction ActionType = 2
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "ActionType_Unknown",
		1: "ActionType_Standard",
		2: "ActionType_Defensive_Reaction",
	}
	ActionType_value = map[string]int32{
		"ActionType_Unknown":            0,
		"ActionType_Standard":           1,
		"ActionType_Defensive_Reaction": 2,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_models_proto_enumTypes[11].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_models_proto_enumTypes[11]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{11}
}

type ReferenceType int32

const (
	ReferenceType_ReferenceType_Unknown  ReferenceType = 0
	ReferenceType_ReferenceType_Skill    ReferenceType = 1
	ReferenceType_ReferenceType_Ability  ReferenceType = 2
	ReferenceType_ReferenceType_GameTerm ReferenceType = 3
	ReferenceType_ReferenceType_Weapon   ReferenceType = 4
)

// Enum value maps for ReferenceType.
var (
	ReferenceType_name = map[int32]string{
		0: "ReferenceType_Unknown",
		1: "ReferenceType_Skill",
		2: "ReferenceType_Ability",
		3: "ReferenceType_GameTerm",
		4: "ReferenceType_Weapon",
	}
	ReferenceType_value = map[string]int32{
		"ReferenceType_Unknown":  0,
		"ReferenceType_Skill":    1,
		"ReferenceType_Ability":  2,
		"ReferenceType_GameTerm": 3,
		"ReferenceType_Weapon":   4,
	}
)

func (x ReferenceType) Enum() *ReferenceType {
	p := new(ReferenceType)
	*p = x
	return p
}

func (x ReferenceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferenceType) Descriptor() protoreflect.EnumDescriptor {
	return file_models_proto_enumTypes[12].Descriptor()
}

func (ReferenceType) Type() protoreflect.EnumType {
	return &file_models_proto_enumTypes[12]
}

func (x ReferenceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferenceType.Descriptor instead.
func (ReferenceType) EnumDescriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{12}
}

type ModificationType int32

const (
	ModificationType_MT_UNK                 ModificationType = 0
	ModificationType_MT_WoundLevelsLight    ModificationType = 1
	ModificationType_MT_WoundLevelsSerious  ModificationType = 2
	ModificationType_MT_WoundLevelsCritical ModificationType = 3
	ModificationType_MT_WoundLevelsMortal   ModificationType = 4
	ModificationType_MT_AttributeBOD        ModificationType = 6
	ModificationType_MT_AttributeWILL       ModificationType = 7
	ModificationType_MT_AttributeREF        ModificationType = 8
	ModificationType_MT_AttributeVIT        ModificationType = 9
	ModificationType_MT_AttributeINT        ModificationType = 10
	ModificationType_MT_AttributeLUCK       ModificationType = 11
	ModificationType_MT_AttributeTECH       ModificationType = 12
	ModificationType_MT_AttributeATTR       ModificationType = 13
	ModificationType_MT_AttributeESS        ModificationType = 14
	ModificationType_MT_AttributePER        ModificationType = 15
	ModificationType_MT_AttributeTempBOD    ModificationType = 16
	ModificationType_MT_AttributeTempWILL   ModificationType = 17
	ModificationType_MT_AttributeTempREF    ModificationType = 18
	ModificationType_MT_AttributeTempVIT    ModificationType = 19
	ModificationType_MT_AttributeTempINT    ModificationType = 20
	ModificationType_MT_AttributeTempLUCK   ModificationType = 21
	ModificationType_MT_AttributeTempTECH   ModificationType = 22
	ModificationType_MT_AttributeTempATTR   ModificationType = 23
	ModificationType_MT_AttributeTempESS    ModificationType = 24
	ModificationType_MT_AttributeTempPER    ModificationType = 25
	ModificationType_MT_Mana                ModificationType = 26
	ModificationType_MT_ManaRegen           ModificationType = 27
	ModificationType_MT_Stamina             ModificationType = 28
	ModificationType_MT_StaminaRegen        ModificationType = 29
	ModificationType_MT_Initiative          ModificationType = 30
	ModificationType_MT_Awarness            ModificationType = 31
	ModificationType_MT_Mana_Temp           ModificationType = 32
	ModificationType_MT_ManaRegen_Temp      ModificationType = 33
	ModificationType_MT_Stamina_Temp        ModificationType = 34
	ModificationType_MT_StaminaREgen_Temp   ModificationType = 35
	ModificationType_MT_Initiative_Temp     ModificationType = 36
	ModificationType_MT_Awarness_Temp       ModificationType = 37
	ModificationType_MT_Skill               ModificationType = 50
)

// Enum value maps for ModificationType.
var (
	ModificationType_name = map[int32]string{
		0:  "MT_UNK",
		1:  "MT_WoundLevelsLight",
		2:  "MT_WoundLevelsSerious",
		3:  "MT_WoundLevelsCritical",
		4:  "MT_WoundLevelsMortal",
		6:  "MT_AttributeBOD",
		7:  "MT_AttributeWILL",
		8:  "MT_AttributeREF",
		9:  "MT_AttributeVIT",
		10: "MT_AttributeINT",
		11: "MT_AttributeLUCK",
		12: "MT_AttributeTECH",
		13: "MT_AttributeATTR",
		14: "MT_AttributeESS",
		15: "MT_AttributePER",
		16: "MT_AttributeTempBOD",
		17: "MT_AttributeTempWILL",
		18: "MT_AttributeTempREF",
		19: "MT_AttributeTempVIT",
		20: "MT_AttributeTempINT",
		21: "MT_AttributeTempLUCK",
		22: "MT_AttributeTempTECH",
		23: "MT_AttributeTempATTR",
		24: "MT_AttributeTempESS",
		25: "MT_AttributeTempPER",
		26: "MT_Mana",
		27: "MT_ManaRegen",
		28: "MT_Stamina",
		29: "MT_StaminaRegen",
		30: "MT_Initiative",
		31: "MT_Awarness",
		32: "MT_Mana_Temp",
		33: "MT_ManaRegen_Temp",
		34: "MT_Stamina_Temp",
		35: "MT_StaminaREgen_Temp",
		36: "MT_Initiative_Temp",
		37: "MT_Awarness_Temp",
		50: "MT_Skill",
	}
	ModificationType_value = map[string]int32{
		"MT_UNK":                 0,
		"MT_WoundLevelsLight":    1,
		"MT_WoundLevelsSerious":  2,
		"MT_WoundLevelsCritical": 3,
		"MT_WoundLevelsMortal":   4,
		"MT_AttributeBOD":        6,
		"MT_AttributeWILL":       7,
		"MT_AttributeREF":        8,
		"MT_AttributeVIT":        9,
		"MT_AttributeINT":        10,
		"MT_AttributeLUCK":       11,
		"MT_AttributeTECH":       12,
		"MT_AttributeATTR":       13,
		"MT_AttributeESS":        14,
		"MT_AttributePER":        15,
		"MT_AttributeTempBOD":    16,
		"MT_AttributeTempWILL":   17,
		"MT_AttributeTempREF":    18,
		"MT_AttributeTempVIT":    19,
		"MT_AttributeTempINT":    20,
		"MT_AttributeTempLUCK":   21,
		"MT_AttributeTempTECH":   22,
		"MT_AttributeTempATTR":   23,
		"MT_AttributeTempESS":    24,
		"MT_AttributeTempPER":    25,
		"MT_Mana":                26,
		"MT_ManaRegen":           27,
		"MT_Stamina":             28,
		"MT_StaminaRegen":        29,
		"MT_Initiative":          30,
		"MT_Awarness":            31,
		"MT_Mana_Temp":           32,
		"MT_ManaRegen_Temp":      33,
		"MT_Stamina_Temp":        34,
		"MT_StaminaREgen_Temp":   35,
		"MT_Initiative_Temp":     36,
		"MT_Awarness_Temp":       37,
		"MT_Skill":               50,
	}
)

func (x ModificationType) Enum() *ModificationType {
	p := new(ModificationType)
	*p = x
	return p
}

func (x ModificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_models_proto_enumTypes[13].Descriptor()
}

func (ModificationType) Type() protoreflect.EnumType {
	return &file_models_proto_enumTypes[13]
}

func (x ModificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModificationType.Descriptor instead.
func (ModificationType) EnumDescriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{13}
}

type UpdateType int32

const (
	UpdateType_UT_Save   UpdateType = 0
	UpdateType_UT_Delete UpdateType = 1
)

// Enum value maps for UpdateType.
var (
	UpdateType_name = map[int32]string{
		0: "UT_Save",
		1: "UT_Delete",
	}
	UpdateType_value = map[string]int32{
		"UT_Save":   0,
		"UT_Delete": 1,
	}
)

func (x UpdateType) Enum() *UpdateType {
	p := new(UpdateType)
	*p = x
	return p
}

func (x UpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_models_proto_enumTypes[14].Descriptor()
}

func (UpdateType) Type() protoreflect.EnumType {
	return &file_models_proto_enumTypes[14]
}

func (x UpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateType.Descriptor instead.
func (UpdateType) EnumDescriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{14}
}

type OrbType int32

const (
	OrbType_OrbType_Unk         OrbType = 0
	OrbType_OrbType_Spell       OrbType = 1
	OrbType_OrbType_Summon      OrbType = 2
	OrbType_OrbType_Enhancement OrbType = 3
)

// Enum value maps for OrbType.
var (
	OrbType_name = map[int32]string{
		0: "OrbType_Unk",
		1: "OrbType_Spell",
		2: "OrbType_Summon",
		3: "OrbType_Enhancement",
	}
	OrbType_value = map[string]int32{
		"OrbType_Unk":         0,
		"OrbType_Spell":       1,
		"OrbType_Summon":      2,
		"OrbType_Enhancement": 3,
	}
)

func (x OrbType) Enum() *OrbType {
	p := new(OrbType)
	*p = x
	return p
}

func (x OrbType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrbType) Descriptor() protoreflect.EnumDescriptor {
	return file_models_proto_enumTypes[15].Descriptor()
}

func (OrbType) Type() protoreflect.EnumType {
	return &file_models_proto_enumTypes[15]
}

func (x OrbType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrbType.Descriptor instead.
func (OrbType) EnumDescriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{15}
}

type Fp2Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageID      string `protobuf:"bytes,1,opt,name=MessageID,proto3" json:"MessageID,omitempty"`
	RespondingToID string `protobuf:"bytes,2,opt,name=RespondingToID,proto3" json:"RespondingToID,omitempty"`
	Sender         string `protobuf:"bytes,3,opt,name=Sender,proto3" json:"Sender,omitempty"`
	// Types that are assignable to Data:
	//
	//	*Fp2Message_Character
	//	*Fp2Message_Attack
	//	*Fp2Message_AttackResult
	//	*Fp2Message_DefenseChallenge
	//	*Fp2Message_DefenseChallengeResponse
	//	*Fp2Message_ReferenceRequest
	//	*Fp2Message_ReferenceResponse
	//	*Fp2Message_UpdateRequest
	Data isFp2Message_Data `protobuf_oneof:"Data"`
}

func (x *Fp2Message) Reset() {
	*x = Fp2Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fp2Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fp2Message) ProtoMessage() {}

func (x *Fp2Message) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fp2Message.ProtoReflect.Descriptor instead.
func (*Fp2Message) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{0}
}

func (x *Fp2Message) GetMessageID() string {
	if x != nil {
		return x.MessageID
	}
	return ""
}

func (x *Fp2Message) GetRespondingToID() string {
	if x != nil {
		return x.RespondingToID
	}
	return ""
}

func (x *Fp2Message) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (m *Fp2Message) GetData() isFp2Message_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Fp2Message) GetCharacter() *Character {
	if x, ok := x.GetData().(*Fp2Message_Character); ok {
		return x.Character
	}
	return nil
}

func (x *Fp2Message) GetAttack() *Attack {
	if x, ok := x.GetData().(*Fp2Message_Attack); ok {
		return x.Attack
	}
	return nil
}

func (x *Fp2Message) GetAttackResult() *AttackResult {
	if x, ok := x.GetData().(*Fp2Message_AttackResult); ok {
		return x.AttackResult
	}
	return nil
}

func (x *Fp2Message) GetDefenseChallenge() *DefenseChallenge {
	if x, ok := x.GetData().(*Fp2Message_DefenseChallenge); ok {
		return x.DefenseChallenge
	}
	return nil
}

func (x *Fp2Message) GetDefenseChallengeResponse() *DefenseChallengeResponse {
	if x, ok := x.GetData().(*Fp2Message_DefenseChallengeResponse); ok {
		return x.DefenseChallengeResponse
	}
	return nil
}

func (x *Fp2Message) GetReferenceRequest() *ReferenceRequest {
	if x, ok := x.GetData().(*Fp2Message_ReferenceRequest); ok {
		return x.ReferenceRequest
	}
	return nil
}

func (x *Fp2Message) GetReferenceResponse() *ReferenceResponse {
	if x, ok := x.GetData().(*Fp2Message_ReferenceResponse); ok {
		return x.ReferenceResponse
	}
	return nil
}

func (x *Fp2Message) GetUpdateRequest() *UpdateRequest {
	if x, ok := x.GetData().(*Fp2Message_UpdateRequest); ok {
		return x.UpdateRequest
	}
	return nil
}

type isFp2Message_Data interface {
	isFp2Message_Data()
}

type Fp2Message_Character struct {
	Character *Character `protobuf:"bytes,5,opt,name=Character,proto3,oneof"`
}

type Fp2Message_Attack struct {
	Attack *Attack `protobuf:"bytes,6,opt,name=Attack,proto3,oneof"`
}

type Fp2Message_AttackResult struct {
	AttackResult *AttackResult `protobuf:"bytes,7,opt,name=AttackResult,proto3,oneof"`
}

type Fp2Message_DefenseChallenge struct {
	DefenseChallenge *DefenseChallenge `protobuf:"bytes,8,opt,name=DefenseChallenge,proto3,oneof"`
}

type Fp2Message_DefenseChallengeResponse struct {
	DefenseChallengeResponse *DefenseChallengeResponse `protobuf:"bytes,9,opt,name=DefenseChallengeResponse,proto3,oneof"`
}

type Fp2Message_ReferenceRequest struct {
	ReferenceRequest *ReferenceRequest `protobuf:"bytes,10,opt,name=ReferenceRequest,proto3,oneof"`
}

type Fp2Message_ReferenceResponse struct {
	ReferenceResponse *ReferenceResponse `protobuf:"bytes,11,opt,name=ReferenceResponse,proto3,oneof"`
}

type Fp2Message_UpdateRequest struct {
	UpdateRequest *UpdateRequest `protobuf:"bytes,12,opt,name=UpdateRequest,proto3,oneof"`
}

func (*Fp2Message_Character) isFp2Message_Data() {}

func (*Fp2Message_Attack) isFp2Message_Data() {}

func (*Fp2Message_AttackResult) isFp2Message_Data() {}

func (*Fp2Message_DefenseChallenge) isFp2Message_Data() {}

func (*Fp2Message_DefenseChallengeResponse) isFp2Message_Data() {}

func (*Fp2Message_ReferenceRequest) isFp2Message_Data() {}

func (*Fp2Message_ReferenceResponse) isFp2Message_Data() {}

func (*Fp2Message_UpdateRequest) isFp2Message_Data() {}

// Represents a Character
type Character struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string               `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name       string               `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Metadata   *CharacterMetadata   `protobuf:"bytes,3,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	Options    *CharacterOptions    `protobuf:"bytes,4,opt,name=Options,proto3" json:"Options,omitempty"`
	Attributes *CharacterAttributes `protobuf:"bytes,5,opt,name=Attributes,proto3" json:"Attributes,omitempty"`
	Health     *CharacterHealth     `protobuf:"bytes,6,opt,name=Health,proto3" json:"Health,omitempty"`
	Skills     []*Skill             `protobuf:"bytes,7,rep,name=Skills,proto3" json:"Skills,omitempty"`
	Weapons    []*Weapon            `protobuf:"bytes,8,rep,name=Weapons,proto3" json:"Weapons,omitempty"`
	Armors     []*Armor             `protobuf:"bytes,9,rep,name=Armors,proto3" json:"Armors,omitempty"`
	Affinities []*Affinty           `protobuf:"bytes,10,rep,name=Affinities,proto3" json:"Affinities,omitempty"`
	Orbs       []*Orb               `protobuf:"bytes,11,rep,name=Orbs,proto3" json:"Orbs,omitempty"`
}

func (x *Character) Reset() {
	*x = Character{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character) ProtoMessage() {}

func (x *Character) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character.ProtoReflect.Descriptor instead.
func (*Character) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{1}
}

func (x *Character) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Character) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Character) GetMetadata() *CharacterMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Character) GetOptions() *CharacterOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Character) GetAttributes() *CharacterAttributes {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Character) GetHealth() *CharacterHealth {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *Character) GetSkills() []*Skill {
	if x != nil {
		return x.Skills
	}
	return nil
}

func (x *Character) GetWeapons() []*Weapon {
	if x != nil {
		return x.Weapons
	}
	return nil
}

func (x *Character) GetArmors() []*Armor {
	if x != nil {
		return x.Armors
	}
	return nil
}

func (x *Character) GetAffinities() []*Affinty {
	if x != nil {
		return x.Affinities
	}
	return nil
}

func (x *Character) GetOrbs() []*Orb {
	if x != nil {
		return x.Orbs
	}
	return nil
}

type Affinty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	School string `protobuf:"bytes,1,opt,name=School,proto3" json:"School,omitempty"`
	Points int32  `protobuf:"varint,2,opt,name=Points,proto3" json:"Points,omitempty"`
}

func (x *Affinty) Reset() {
	*x = Affinty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Affinty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Affinty) ProtoMessage() {}

func (x *Affinty) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Affinty.ProtoReflect.Descriptor instead.
func (*Affinty) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{2}
}

func (x *Affinty) GetSchool() string {
	if x != nil {
		return x.School
	}
	return ""
}

func (x *Affinty) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

type CharacterCreation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeAllocationMethod AttributeAllocationMethod `protobuf:"varint,1,opt,name=AttributeAllocationMethod,proto3,enum=fp2.AttributeAllocationMethod" json:"AttributeAllocationMethod,omitempty"`
	AttributePointsRemaining  int32                     `protobuf:"varint,2,opt,name=AttributePointsRemaining,proto3" json:"AttributePointsRemaining,omitempty"`
	SkillPoints               int32                     `protobuf:"varint,3,opt,name=SkillPoints,proto3" json:"SkillPoints,omitempty"`
	SkillPointsRemaining      int32                     `protobuf:"varint,4,opt,name=SkillPointsRemaining,proto3" json:"SkillPointsRemaining,omitempty"`
	StartingMoney             *MonetaryAmount           `protobuf:"bytes,5,opt,name=StartingMoney,proto3" json:"StartingMoney,omitempty"`
	AffinityPoints            int32                     `protobuf:"varint,6,opt,name=AffinityPoints,proto3" json:"AffinityPoints,omitempty"`
	AffinityPointsRemaining   int32                     `protobuf:"varint,7,opt,name=AffinityPointsRemaining,proto3" json:"AffinityPointsRemaining,omitempty"`
}

func (x *CharacterCreation) Reset() {
	*x = CharacterCreation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterCreation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterCreation) ProtoMessage() {}

func (x *CharacterCreation) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterCreation.ProtoReflect.Descriptor instead.
func (*CharacterCreation) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{3}
}

func (x *CharacterCreation) GetAttributeAllocationMethod() AttributeAllocationMethod {
	if x != nil {
		return x.AttributeAllocationMethod
	}
	return AttributeAllocationMethod_AttributeAllocationMethod_UNK
}

func (x *CharacterCreation) GetAttributePointsRemaining() int32 {
	if x != nil {
		return x.AttributePointsRemaining
	}
	return 0
}

func (x *CharacterCreation) GetSkillPoints() int32 {
	if x != nil {
		return x.SkillPoints
	}
	return 0
}

func (x *CharacterCreation) GetSkillPointsRemaining() int32 {
	if x != nil {
		return x.SkillPointsRemaining
	}
	return 0
}

func (x *CharacterCreation) GetStartingMoney() *MonetaryAmount {
	if x != nil {
		return x.StartingMoney
	}
	return nil
}

func (x *CharacterCreation) GetAffinityPoints() int32 {
	if x != nil {
		return x.AffinityPoints
	}
	return 0
}

func (x *CharacterCreation) GetAffinityPointsRemaining() int32 {
	if x != nil {
		return x.AffinityPointsRemaining
	}
	return 0
}

type CharacterMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerName string `protobuf:"bytes,1,opt,name=PlayerName,proto3" json:"PlayerName,omitempty"`
	Backstory  string `protobuf:"bytes,2,opt,name=Backstory,proto3" json:"Backstory,omitempty"`
	Height     string `protobuf:"bytes,3,opt,name=Height,proto3" json:"Height,omitempty"`
	Weight     string `protobuf:"bytes,4,opt,name=Weight,proto3" json:"Weight,omitempty"`
	Race       string `protobuf:"bytes,5,opt,name=Race,proto3" json:"Race,omitempty"`
	EyeColor   string `protobuf:"bytes,6,opt,name=EyeColor,proto3" json:"EyeColor,omitempty"`
	HairColor  string `protobuf:"bytes,7,opt,name=HairColor,proto3" json:"HairColor,omitempty"`
}

func (x *CharacterMetadata) Reset() {
	*x = CharacterMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterMetadata) ProtoMessage() {}

func (x *CharacterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterMetadata.ProtoReflect.Descriptor instead.
func (*CharacterMetadata) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{4}
}

func (x *CharacterMetadata) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *CharacterMetadata) GetBackstory() string {
	if x != nil {
		return x.Backstory
	}
	return ""
}

func (x *CharacterMetadata) GetHeight() string {
	if x != nil {
		return x.Height
	}
	return ""
}

func (x *CharacterMetadata) GetWeight() string {
	if x != nil {
		return x.Weight
	}
	return ""
}

func (x *CharacterMetadata) GetRace() string {
	if x != nil {
		return x.Race
	}
	return ""
}

func (x *CharacterMetadata) GetEyeColor() string {
	if x != nil {
		return x.EyeColor
	}
	return ""
}

func (x *CharacterMetadata) GetHairColor() string {
	if x != nil {
		return x.HairColor
	}
	return ""
}

type Game struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *Game) Reset() {
	*x = Game{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Game) ProtoMessage() {}

func (x *Game) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Game.ProtoReflect.Descriptor instead.
func (*Game) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{5}
}

func (x *Game) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Game) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GameSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiceLog *DiceRollLog `protobuf:"bytes,1,opt,name=DiceLog,proto3" json:"DiceLog,omitempty"`
	ChatLog *ChatLog     `protobuf:"bytes,2,opt,name=ChatLog,proto3" json:"ChatLog,omitempty"`
}

func (x *GameSession) Reset() {
	*x = GameSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSession) ProtoMessage() {}

func (x *GameSession) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSession.ProtoReflect.Descriptor instead.
func (*GameSession) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{6}
}

func (x *GameSession) GetDiceLog() *DiceRollLog {
	if x != nil {
		return x.DiceLog
	}
	return nil
}

func (x *GameSession) GetChatLog() *ChatLog {
	if x != nil {
		return x.ChatLog
	}
	return nil
}

type ChatLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rolls []*DiceRollResults `protobuf:"bytes,1,rep,name=Rolls,proto3" json:"Rolls,omitempty"`
}

func (x *ChatLog) Reset() {
	*x = ChatLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatLog) ProtoMessage() {}

func (x *ChatLog) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatLog.ProtoReflect.Descriptor instead.
func (*ChatLog) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{7}
}

func (x *ChatLog) GetRolls() []*DiceRollResults {
	if x != nil {
		return x.Rolls
	}
	return nil
}

type DiceRollLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rolls []*DiceRollResults `protobuf:"bytes,1,rep,name=Rolls,proto3" json:"Rolls,omitempty"`
}

func (x *DiceRollLog) Reset() {
	*x = DiceRollLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiceRollLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiceRollLog) ProtoMessage() {}

func (x *DiceRollLog) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiceRollLog.ProtoReflect.Descriptor instead.
func (*DiceRollLog) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{8}
}

func (x *DiceRollLog) GetRolls() []*DiceRollResults {
	if x != nil {
		return x.Rolls
	}
	return nil
}

type Encounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string             `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name             string             `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Active           bool               `protobuf:"varint,3,opt,name=Active,proto3" json:"Active,omitempty"`
	CurrentTurn      int32              `protobuf:"varint,4,opt,name=CurrentTurn,proto3" json:"CurrentTurn,omitempty"`
	CurrentEntity    int32              `protobuf:"varint,5,opt,name=CurrentEntity,proto3" json:"CurrentEntity,omitempty"`
	InitiativeOrders []*InitiativeOrder `protobuf:"bytes,6,rep,name=InitiativeOrders,proto3" json:"InitiativeOrders,omitempty"`
	Entities         []*EntityReference `protobuf:"bytes,7,rep,name=Entities,proto3" json:"Entities,omitempty"`
}

func (x *Encounter) Reset() {
	*x = Encounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Encounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encounter) ProtoMessage() {}

func (x *Encounter) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encounter.ProtoReflect.Descriptor instead.
func (*Encounter) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{9}
}

func (x *Encounter) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Encounter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Encounter) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Encounter) GetCurrentTurn() int32 {
	if x != nil {
		return x.CurrentTurn
	}
	return 0
}

func (x *Encounter) GetCurrentEntity() int32 {
	if x != nil {
		return x.CurrentEntity
	}
	return 0
}

func (x *Encounter) GetInitiativeOrders() []*InitiativeOrder {
	if x != nil {
		return x.InitiativeOrders
	}
	return nil
}

func (x *Encounter) GetEntities() []*EntityReference {
	if x != nil {
		return x.Entities
	}
	return nil
}

type EntityReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   string     `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type EntityType `protobuf:"varint,2,opt,name=Type,proto3,enum=fp2.EntityType" json:"Type,omitempty"`
}

func (x *EntityReference) Reset() {
	*x = EntityReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntityReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityReference) ProtoMessage() {}

func (x *EntityReference) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityReference.ProtoReflect.Descriptor instead.
func (*EntityReference) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{10}
}

func (x *EntityReference) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *EntityReference) GetType() EntityType {
	if x != nil {
		return x.Type
	}
	return EntityType_EntityType_Unknown
}

type InitiativeOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityID       string `protobuf:"bytes,1,opt,name=EntityID,proto3" json:"EntityID,omitempty"`
	InitiativeRoll int32  `protobuf:"varint,3,opt,name=InitiativeRoll,proto3" json:"InitiativeRoll,omitempty"`
}

func (x *InitiativeOrder) Reset() {
	*x = InitiativeOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitiativeOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitiativeOrder) ProtoMessage() {}

func (x *InitiativeOrder) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitiativeOrder.ProtoReflect.Descriptor instead.
func (*InitiativeOrder) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{11}
}

func (x *InitiativeOrder) GetEntityID() string {
	if x != nil {
		return x.EntityID
	}
	return ""
}

func (x *InitiativeOrder) GetInitiativeRoll() int32 {
	if x != nil {
		return x.InitiativeRoll
	}
	return 0
}

type ChallengeDiceRoll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ChallengeType string `protobuf:"bytes,2,opt,name=ChallengeType,proto3" json:"ChallengeType,omitempty"`
	RollRequested string `protobuf:"bytes,3,opt,name=RollRequested,proto3" json:"RollRequested,omitempty"`
	Text          string `protobuf:"bytes,4,opt,name=Text,proto3" json:"Text,omitempty"`
}

func (x *ChallengeDiceRoll) Reset() {
	*x = ChallengeDiceRoll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeDiceRoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeDiceRoll) ProtoMessage() {}

func (x *ChallengeDiceRoll) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeDiceRoll.ProtoReflect.Descriptor instead.
func (*ChallengeDiceRoll) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{12}
}

func (x *ChallengeDiceRoll) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ChallengeDiceRoll) GetChallengeType() string {
	if x != nil {
		return x.ChallengeType
	}
	return ""
}

func (x *ChallengeDiceRoll) GetRollRequested() string {
	if x != nil {
		return x.RollRequested
	}
	return ""
}

func (x *ChallengeDiceRoll) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type ChallengeDiceRollResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChallengeID string `protobuf:"bytes,1,opt,name=ChallengeID,proto3" json:"ChallengeID,omitempty"`
	Result      string `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *ChallengeDiceRollResult) Reset() {
	*x = ChallengeDiceRollResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeDiceRollResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeDiceRollResult) ProtoMessage() {}

func (x *ChallengeDiceRollResult) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeDiceRollResult.ProtoReflect.Descriptor instead.
func (*ChallengeDiceRollResult) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{13}
}

func (x *ChallengeDiceRollResult) GetChallengeID() string {
	if x != nil {
		return x.ChallengeID
	}
	return ""
}

func (x *ChallengeDiceRollResult) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type PlayerOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlayerOptions) Reset() {
	*x = PlayerOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerOptions) ProtoMessage() {}

func (x *PlayerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerOptions.ProtoReflect.Descriptor instead.
func (*PlayerOptions) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{14}
}

type CharacterOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RollMyOwnDice bool `protobuf:"varint,1,opt,name=RollMyOwnDice,proto3" json:"RollMyOwnDice,omitempty"`
}

func (x *CharacterOptions) Reset() {
	*x = CharacterOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterOptions) ProtoMessage() {}

func (x *CharacterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterOptions.ProtoReflect.Descriptor instead.
func (*CharacterOptions) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{15}
}

func (x *CharacterOptions) GetRollMyOwnDice() bool {
	if x != nil {
		return x.RollMyOwnDice
	}
	return false
}

type CharacterAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BOD        *PrimaryAttribute    `protobuf:"bytes,1,opt,name=BOD,proto3" json:"BOD,omitempty"`
	WILL       *PrimaryAttribute    `protobuf:"bytes,2,opt,name=WILL,proto3" json:"WILL,omitempty"`
	REF        *PrimaryAttribute    `protobuf:"bytes,3,opt,name=REF,proto3" json:"REF,omitempty"`
	VIT        *PrimaryAttribute    `protobuf:"bytes,4,opt,name=VIT,proto3" json:"VIT,omitempty"`
	INT        *PrimaryAttribute    `protobuf:"bytes,5,opt,name=INT,proto3" json:"INT,omitempty"`
	LUCK       *PrimaryAttribute    `protobuf:"bytes,6,opt,name=LUCK,proto3" json:"LUCK,omitempty"`
	TECH       *PrimaryAttribute    `protobuf:"bytes,7,opt,name=TECH,proto3" json:"TECH,omitempty"`
	ATTR       *PrimaryAttribute    `protobuf:"bytes,8,opt,name=ATTR,proto3" json:"ATTR,omitempty"`
	ESS        *PrimaryAttribute    `protobuf:"bytes,9,opt,name=ESS,proto3" json:"ESS,omitempty"`
	PER        *PrimaryAttribute    `protobuf:"bytes,10,opt,name=PER,proto3" json:"PER,omitempty"`
	Mana       *ConsumableAttribute `protobuf:"bytes,11,opt,name=Mana,proto3" json:"Mana,omitempty"`
	Stamina    *ConsumableAttribute `protobuf:"bytes,12,opt,name=Stamina,proto3" json:"Stamina,omitempty"`
	Initiative *CalculatedValue     `protobuf:"bytes,13,opt,name=Initiative,proto3" json:"Initiative,omitempty"`
	Awarness   *CalculatedValue     `protobuf:"bytes,14,opt,name=Awarness,proto3" json:"Awarness,omitempty"`
}

func (x *CharacterAttributes) Reset() {
	*x = CharacterAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterAttributes) ProtoMessage() {}

func (x *CharacterAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterAttributes.ProtoReflect.Descriptor instead.
func (*CharacterAttributes) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{16}
}

func (x *CharacterAttributes) GetBOD() *PrimaryAttribute {
	if x != nil {
		return x.BOD
	}
	return nil
}

func (x *CharacterAttributes) GetWILL() *PrimaryAttribute {
	if x != nil {
		return x.WILL
	}
	return nil
}

func (x *CharacterAttributes) GetREF() *PrimaryAttribute {
	if x != nil {
		return x.REF
	}
	return nil
}

func (x *CharacterAttributes) GetVIT() *PrimaryAttribute {
	if x != nil {
		return x.VIT
	}
	return nil
}

func (x *CharacterAttributes) GetINT() *PrimaryAttribute {
	if x != nil {
		return x.INT
	}
	return nil
}

func (x *CharacterAttributes) GetLUCK() *PrimaryAttribute {
	if x != nil {
		return x.LUCK
	}
	return nil
}

func (x *CharacterAttributes) GetTECH() *PrimaryAttribute {
	if x != nil {
		return x.TECH
	}
	return nil
}

func (x *CharacterAttributes) GetATTR() *PrimaryAttribute {
	if x != nil {
		return x.ATTR
	}
	return nil
}

func (x *CharacterAttributes) GetESS() *PrimaryAttribute {
	if x != nil {
		return x.ESS
	}
	return nil
}

func (x *CharacterAttributes) GetPER() *PrimaryAttribute {
	if x != nil {
		return x.PER
	}
	return nil
}

func (x *CharacterAttributes) GetMana() *ConsumableAttribute {
	if x != nil {
		return x.Mana
	}
	return nil
}

func (x *CharacterAttributes) GetStamina() *ConsumableAttribute {
	if x != nil {
		return x.Stamina
	}
	return nil
}

func (x *CharacterAttributes) GetInitiative() *CalculatedValue {
	if x != nil {
		return x.Initiative
	}
	return nil
}

func (x *CharacterAttributes) GetAwarness() *CalculatedValue {
	if x != nil {
		return x.Awarness
	}
	return nil
}

type PrimaryAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawValue  int32 `protobuf:"varint,2,opt,name=RawValue,proto3" json:"RawValue,omitempty"`
	SetValue  int32 `protobuf:"varint,3,opt,name=SetValue,proto3" json:"SetValue,omitempty"`
	CalcValue int32 `protobuf:"varint,4,opt,name=CalcValue,proto3" json:"CalcValue,omitempty"`
}

func (x *PrimaryAttribute) Reset() {
	*x = PrimaryAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimaryAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimaryAttribute) ProtoMessage() {}

func (x *PrimaryAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimaryAttribute.ProtoReflect.Descriptor instead.
func (*PrimaryAttribute) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{17}
}

func (x *PrimaryAttribute) GetRawValue() int32 {
	if x != nil {
		return x.RawValue
	}
	return 0
}

func (x *PrimaryAttribute) GetSetValue() int32 {
	if x != nil {
		return x.SetValue
	}
	return 0
}

func (x *PrimaryAttribute) GetCalcValue() int32 {
	if x != nil {
		return x.CalcValue
	}
	return 0
}

type ConsumableAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxValue       int32   `protobuf:"varint,1,opt,name=MaxValue,proto3" json:"MaxValue,omitempty"`
	SetValue       int32   `protobuf:"varint,2,opt,name=SetValue,proto3" json:"SetValue,omitempty"`
	RegenPerRound  float32 `protobuf:"fixed32,3,opt,name=RegenPerRound,proto3" json:"RegenPerRound,omitempty"`
	RegenPerMinute float32 `protobuf:"fixed32,4,opt,name=RegenPerMinute,proto3" json:"RegenPerMinute,omitempty"`
}

func (x *ConsumableAttribute) Reset() {
	*x = ConsumableAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumableAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumableAttribute) ProtoMessage() {}

func (x *ConsumableAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumableAttribute.ProtoReflect.Descriptor instead.
func (*ConsumableAttribute) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{18}
}

func (x *ConsumableAttribute) GetMaxValue() int32 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *ConsumableAttribute) GetSetValue() int32 {
	if x != nil {
		return x.SetValue
	}
	return 0
}

func (x *ConsumableAttribute) GetRegenPerRound() float32 {
	if x != nil {
		return x.RegenPerRound
	}
	return 0
}

func (x *ConsumableAttribute) GetRegenPerMinute() float32 {
	if x != nil {
		return x.RegenPerMinute
	}
	return 0
}

type CalculatedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *CalculatedValue) Reset() {
	*x = CalculatedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculatedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculatedValue) ProtoMessage() {}

func (x *CalculatedValue) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculatedValue.ProtoReflect.Descriptor instead.
func (*CalculatedValue) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{19}
}

func (x *CalculatedValue) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Attack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attacker    string     `protobuf:"bytes,1,opt,name=Attacker,proto3" json:"Attacker,omitempty"`
	Target      string     `protobuf:"bytes,2,opt,name=Target,proto3" json:"Target,omitempty"`
	AttackType  AttackType `protobuf:"varint,3,opt,name=AttackType,proto3,enum=fp2.AttackType" json:"AttackType,omitempty"`
	Description string     `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	Weapon      string     `protobuf:"bytes,5,opt,name=Weapon,proto3" json:"Weapon,omitempty"`
}

func (x *Attack) Reset() {
	*x = Attack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attack) ProtoMessage() {}

func (x *Attack) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attack.ProtoReflect.Descriptor instead.
func (*Attack) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{20}
}

func (x *Attack) GetAttacker() string {
	if x != nil {
		return x.Attacker
	}
	return ""
}

func (x *Attack) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Attack) GetAttackType() AttackType {
	if x != nil {
		return x.AttackType
	}
	return AttackType_AttackType_Unknown
}

func (x *Attack) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Attack) GetWeapon() string {
	if x != nil {
		return x.Weapon
	}
	return ""
}

type AttackResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attack          *Attack        `protobuf:"bytes,1,opt,name=Attack,proto3" json:"Attack,omitempty"`
	Defense         *DefenseOption `protobuf:"bytes,2,opt,name=Defense,proto3" json:"Defense,omitempty"`
	AttackTotal     int32          `protobuf:"varint,3,opt,name=AttackTotal,proto3" json:"AttackTotal,omitempty"`   // Need to put a dice result in here?
	DefenseTotal    int32          `protobuf:"varint,4,opt,name=DefenseTotal,proto3" json:"DefenseTotal,omitempty"` // Need to put a dice result in here?
	AttackDamage    int32          `protobuf:"varint,5,opt,name=AttackDamage,proto3" json:"AttackDamage,omitempty"` // Need to put a dice result in here?
	ShieldSP        int32          `protobuf:"varint,6,opt,name=ShieldSP,proto3" json:"ShieldSP,omitempty"`
	ArmorSP         int32          `protobuf:"varint,7,opt,name=ArmorSP,proto3" json:"ArmorSP,omitempty"`
	ShieldDamaged   bool           `protobuf:"varint,8,opt,name=ShieldDamaged,proto3" json:"ShieldDamaged,omitempty"`
	ArmorDamaged    bool           `protobuf:"varint,9,opt,name=ArmorDamaged,proto3" json:"ArmorDamaged,omitempty"`
	DamageInflicted int32          `protobuf:"varint,10,opt,name=DamageInflicted,proto3" json:"DamageInflicted,omitempty"`
}

func (x *AttackResult) Reset() {
	*x = AttackResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttackResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttackResult) ProtoMessage() {}

func (x *AttackResult) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttackResult.ProtoReflect.Descriptor instead.
func (*AttackResult) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{21}
}

func (x *AttackResult) GetAttack() *Attack {
	if x != nil {
		return x.Attack
	}
	return nil
}

func (x *AttackResult) GetDefense() *DefenseOption {
	if x != nil {
		return x.Defense
	}
	return nil
}

func (x *AttackResult) GetAttackTotal() int32 {
	if x != nil {
		return x.AttackTotal
	}
	return 0
}

func (x *AttackResult) GetDefenseTotal() int32 {
	if x != nil {
		return x.DefenseTotal
	}
	return 0
}

func (x *AttackResult) GetAttackDamage() int32 {
	if x != nil {
		return x.AttackDamage
	}
	return 0
}

func (x *AttackResult) GetShieldSP() int32 {
	if x != nil {
		return x.ShieldSP
	}
	return 0
}

func (x *AttackResult) GetArmorSP() int32 {
	if x != nil {
		return x.ArmorSP
	}
	return 0
}

func (x *AttackResult) GetShieldDamaged() bool {
	if x != nil {
		return x.ShieldDamaged
	}
	return false
}

func (x *AttackResult) GetArmorDamaged() bool {
	if x != nil {
		return x.ArmorDamaged
	}
	return false
}

func (x *AttackResult) GetDamageInflicted() int32 {
	if x != nil {
		return x.DamageInflicted
	}
	return 0
}

type DefenseChallenge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attack         *Attack          `protobuf:"bytes,1,opt,name=Attack,proto3" json:"Attack,omitempty"`
	DefenseOptions []*DefenseOption `protobuf:"bytes,2,rep,name=DefenseOptions,proto3" json:"DefenseOptions,omitempty"`
}

func (x *DefenseChallenge) Reset() {
	*x = DefenseChallenge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefenseChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefenseChallenge) ProtoMessage() {}

func (x *DefenseChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefenseChallenge.ProtoReflect.Descriptor instead.
func (*DefenseChallenge) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{22}
}

func (x *DefenseChallenge) GetAttack() *Attack {
	if x != nil {
		return x.Attack
	}
	return nil
}

func (x *DefenseChallenge) GetDefenseOptions() []*DefenseOption {
	if x != nil {
		return x.DefenseOptions
	}
	return nil
}

type DefenseChallengeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Challenge *DefenseChallenge `protobuf:"bytes,1,opt,name=Challenge,proto3" json:"Challenge,omitempty"`
	Choice    *DefenseOption    `protobuf:"bytes,2,opt,name=Choice,proto3" json:"Choice,omitempty"`
}

func (x *DefenseChallengeResponse) Reset() {
	*x = DefenseChallengeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefenseChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefenseChallengeResponse) ProtoMessage() {}

func (x *DefenseChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefenseChallengeResponse.ProtoReflect.Descriptor instead.
func (*DefenseChallengeResponse) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{23}
}

func (x *DefenseChallengeResponse) GetChallenge() *DefenseChallenge {
	if x != nil {
		return x.Challenge
	}
	return nil
}

func (x *DefenseChallengeResponse) GetChoice() *DefenseOption {
	if x != nil {
		return x.Choice
	}
	return nil
}

type DefenseOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefenseType  DefenseType `protobuf:"varint,1,opt,name=DefenseType,proto3,enum=fp2.DefenseType" json:"DefenseType,omitempty"`
	DefenseItem  string      `protobuf:"bytes,2,opt,name=DefenseItem,proto3" json:"DefenseItem,omitempty"`
	Description  string      `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	DefenseTotal int32       `protobuf:"varint,4,opt,name=DefenseTotal,proto3" json:"DefenseTotal,omitempty"`
}

func (x *DefenseOption) Reset() {
	*x = DefenseOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefenseOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefenseOption) ProtoMessage() {}

func (x *DefenseOption) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefenseOption.ProtoReflect.Descriptor instead.
func (*DefenseOption) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{24}
}

func (x *DefenseOption) GetDefenseType() DefenseType {
	if x != nil {
		return x.DefenseType
	}
	return DefenseType_Unknown
}

func (x *DefenseOption) GetDefenseItem() string {
	if x != nil {
		return x.DefenseItem
	}
	return ""
}

func (x *DefenseOption) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DefenseOption) GetDefenseTotal() int32 {
	if x != nil {
		return x.DefenseTotal
	}
	return 0
}

type CharacterHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LightLevels       int32      `protobuf:"varint,1,opt,name=LightLevels,proto3" json:"LightLevels,omitempty"`
	SeriousLevels     int32      `protobuf:"varint,2,opt,name=SeriousLevels,proto3" json:"SeriousLevels,omitempty"`
	CriticalLevels    int32      `protobuf:"varint,3,opt,name=CriticalLevels,proto3" json:"CriticalLevels,omitempty"`
	MortalLevels      int32      `protobuf:"varint,4,opt,name=MortalLevels,proto3" json:"MortalLevels,omitempty"`
	CurrentWounds     int32      `protobuf:"varint,5,opt,name=CurrentWounds,proto3" json:"CurrentWounds,omitempty"`
	CurrentWoundState WoundState `protobuf:"varint,6,opt,name=CurrentWoundState,proto3,enum=fp2.WoundState" json:"CurrentWoundState,omitempty"`
	MortalN           int32      `protobuf:"varint,7,opt,name=MortalN,proto3" json:"MortalN,omitempty"`
}

func (x *CharacterHealth) Reset() {
	*x = CharacterHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterHealth) ProtoMessage() {}

func (x *CharacterHealth) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterHealth.ProtoReflect.Descriptor instead.
func (*CharacterHealth) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{25}
}

func (x *CharacterHealth) GetLightLevels() int32 {
	if x != nil {
		return x.LightLevels
	}
	return 0
}

func (x *CharacterHealth) GetSeriousLevels() int32 {
	if x != nil {
		return x.SeriousLevels
	}
	return 0
}

func (x *CharacterHealth) GetCriticalLevels() int32 {
	if x != nil {
		return x.CriticalLevels
	}
	return 0
}

func (x *CharacterHealth) GetMortalLevels() int32 {
	if x != nil {
		return x.MortalLevels
	}
	return 0
}

func (x *CharacterHealth) GetCurrentWounds() int32 {
	if x != nil {
		return x.CurrentWounds
	}
	return 0
}

func (x *CharacterHealth) GetCurrentWoundState() WoundState {
	if x != nil {
		return x.CurrentWoundState
	}
	return WoundState_WoundState_Unknown
}

func (x *CharacterHealth) GetMortalN() int32 {
	if x != nil {
		return x.MortalN
	}
	return 0
}

type Skill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Level int32  `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`
	IPs   int32  `protobuf:"varint,3,opt,name=IPs,proto3" json:"IPs,omitempty"`
	Mod   int32  `protobuf:"varint,4,opt,name=Mod,proto3" json:"Mod,omitempty"`
	Total int32  `protobuf:"varint,5,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *Skill) Reset() {
	*x = Skill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Skill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Skill) ProtoMessage() {}

func (x *Skill) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Skill.ProtoReflect.Descriptor instead.
func (*Skill) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{26}
}

func (x *Skill) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Skill) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Skill) GetIPs() int32 {
	if x != nil {
		return x.IPs
	}
	return 0
}

func (x *Skill) GetMod() int32 {
	if x != nil {
		return x.Mod
	}
	return 0
}

func (x *Skill) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CalculatedCharacterSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skill    *Skill `protobuf:"bytes,1,opt,name=Skill,proto3" json:"Skill,omitempty"`
	AttrBase int32  `protobuf:"varint,2,opt,name=AttrBase,proto3" json:"AttrBase,omitempty"`
	Mods     int32  `protobuf:"varint,3,opt,name=Mods,proto3" json:"Mods,omitempty"`
	Value    int32  `protobuf:"varint,4,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *CalculatedCharacterSkill) Reset() {
	*x = CalculatedCharacterSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculatedCharacterSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculatedCharacterSkill) ProtoMessage() {}

func (x *CalculatedCharacterSkill) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculatedCharacterSkill.ProtoReflect.Descriptor instead.
func (*CalculatedCharacterSkill) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{27}
}

func (x *CalculatedCharacterSkill) GetSkill() *Skill {
	if x != nil {
		return x.Skill
	}
	return nil
}

func (x *CalculatedCharacterSkill) GetAttrBase() int32 {
	if x != nil {
		return x.AttrBase
	}
	return 0
}

func (x *CalculatedCharacterSkill) GetMods() int32 {
	if x != nil {
		return x.Mods
	}
	return 0
}

func (x *CalculatedCharacterSkill) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type RefSkill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            string              `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string              `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description   string              `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	AttributeType PrimaryAttributeVal `protobuf:"varint,4,opt,name=AttributeType,proto3,enum=fp2.PrimaryAttributeVal" json:"AttributeType,omitempty"`
	Restrictions  string              `protobuf:"bytes,5,opt,name=Restrictions,proto3" json:"Restrictions,omitempty"`
	Abilities     []*Ability          `protobuf:"bytes,6,rep,name=Abilities,proto3" json:"Abilities,omitempty"`
}

func (x *RefSkill) Reset() {
	*x = RefSkill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefSkill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefSkill) ProtoMessage() {}

func (x *RefSkill) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefSkill.ProtoReflect.Descriptor instead.
func (*RefSkill) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{28}
}

func (x *RefSkill) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RefSkill) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RefSkill) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RefSkill) GetAttributeType() PrimaryAttributeVal {
	if x != nil {
		return x.AttributeType
	}
	return PrimaryAttributeVal_PrimaryAttributeVal_UNK
}

func (x *RefSkill) GetRestrictions() string {
	if x != nil {
		return x.Restrictions
	}
	return ""
}

func (x *RefSkill) GetAbilities() []*Ability {
	if x != nil {
		return x.Abilities
	}
	return nil
}

type Ability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description      string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	SkillLevelUnlock string `protobuf:"bytes,4,opt,name=SkillLevelUnlock,proto3" json:"SkillLevelUnlock,omitempty"`
	// How to model cost
	CanAttackWith bool `protobuf:"varint,5,opt,name=CanAttackWith,proto3" json:"CanAttackWith,omitempty"` // How to model attack, need to include i ions (attack type, skill used)
	CanDefendWith bool `protobuf:"varint,6,opt,name=CanDefendWith,proto3" json:"CanDefendWith,omitempty"` // How to model defense
}

func (x *Ability) Reset() {
	*x = Ability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ability) ProtoMessage() {}

func (x *Ability) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ability.ProtoReflect.Descriptor instead.
func (*Ability) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{29}
}

func (x *Ability) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Ability) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ability) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Ability) GetSkillLevelUnlock() string {
	if x != nil {
		return x.SkillLevelUnlock
	}
	return ""
}

func (x *Ability) GetCanAttackWith() bool {
	if x != nil {
		return x.CanAttackWith
	}
	return false
}

func (x *Ability) GetCanDefendWith() bool {
	if x != nil {
		return x.CanDefendWith
	}
	return false
}

type MonetaryAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CP int32 `protobuf:"varint,1,opt,name=CP,proto3" json:"CP,omitempty"`
	SP int32 `protobuf:"varint,2,opt,name=SP,proto3" json:"SP,omitempty"`
	GP int32 `protobuf:"varint,3,opt,name=GP,proto3" json:"GP,omitempty"`
	PP int32 `protobuf:"varint,4,opt,name=PP,proto3" json:"PP,omitempty"`
}

func (x *MonetaryAmount) Reset() {
	*x = MonetaryAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonetaryAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonetaryAmount) ProtoMessage() {}

func (x *MonetaryAmount) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonetaryAmount.ProtoReflect.Descriptor instead.
func (*MonetaryAmount) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{30}
}

func (x *MonetaryAmount) GetCP() int32 {
	if x != nil {
		return x.CP
	}
	return 0
}

func (x *MonetaryAmount) GetSP() int32 {
	if x != nil {
		return x.SP
	}
	return 0
}

func (x *MonetaryAmount) GetGP() int32 {
	if x != nil {
		return x.GP
	}
	return 0
}

func (x *MonetaryAmount) GetPP() int32 {
	if x != nil {
		return x.PP
	}
	return 0
}

type IconPicture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon    string `protobuf:"bytes,1,opt,name=Icon,proto3" json:"Icon,omitempty"`
	Picture string `protobuf:"bytes,2,opt,name=Picture,proto3" json:"Picture,omitempty"`
}

func (x *IconPicture) Reset() {
	*x = IconPicture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IconPicture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IconPicture) ProtoMessage() {}

func (x *IconPicture) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IconPicture.ProtoReflect.Descriptor instead.
func (*IconPicture) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{31}
}

func (x *IconPicture) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *IconPicture) GetPicture() string {
	if x != nil {
		return x.Picture
	}
	return ""
}

type RefWeapon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                 string          `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name               string          `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description        string          `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Damage1H           string          `protobuf:"bytes,4,opt,name=Damage1H,proto3" json:"Damage1H,omitempty"`
	Damage2H           string          `protobuf:"bytes,5,opt,name=Damage2H,proto3" json:"Damage2H,omitempty"`
	BaseWeaponAccuracy int32           `protobuf:"varint,6,opt,name=BaseWeaponAccuracy,proto3" json:"BaseWeaponAccuracy,omitempty"`
	DefenseModifier    int32           `protobuf:"varint,7,opt,name=DefenseModifier,proto3" json:"DefenseModifier,omitempty"`
	DefenseType        DefenseType     `protobuf:"varint,8,opt,name=DefenseType,proto3,enum=fp2.DefenseType" json:"DefenseType,omitempty"`
	Cost               *MonetaryAmount `protobuf:"bytes,9,opt,name=Cost,proto3" json:"Cost,omitempty"`
	Rarity             Rarity          `protobuf:"varint,10,opt,name=Rarity,proto3,enum=fp2.Rarity" json:"Rarity,omitempty"`
	RangeFt            int32           `protobuf:"varint,11,opt,name=RangeFt,proto3" json:"RangeFt,omitempty"`
	RequiredSkill      string          `protobuf:"bytes,12,opt,name=RequiredSkill,proto3" json:"RequiredSkill,omitempty"`
	Melee              bool            `protobuf:"varint,13,opt,name=Melee,proto3" json:"Melee,omitempty"`
	Ranged             bool            `protobuf:"varint,15,opt,name=Ranged,proto3" json:"Ranged,omitempty"`
	Wield1Hand         bool            `protobuf:"varint,16,opt,name=Wield1Hand,proto3" json:"Wield1Hand,omitempty"`
	Wield2Hand         bool            `protobuf:"varint,17,opt,name=Wield2Hand,proto3" json:"Wield2Hand,omitempty"`
	Picture            *IconPicture    `protobuf:"bytes,18,opt,name=Picture,proto3" json:"Picture,omitempty"`
	CanBlock           bool            `protobuf:"varint,19,opt,name=CanBlock,proto3" json:"CanBlock,omitempty"`
	CanParry           bool            `protobuf:"varint,20,opt,name=CanParry,proto3" json:"CanParry,omitempty"`
	ParryMod           int32           `protobuf:"varint,21,opt,name=ParryMod,proto3" json:"ParryMod,omitempty"`
	BlockMod           int32           `protobuf:"varint,22,opt,name=BlockMod,proto3" json:"BlockMod,omitempty"`
	BlockSP            int32           `protobuf:"varint,23,opt,name=BlockSP,proto3" json:"BlockSP,omitempty"`
	CanDegrade         bool            `protobuf:"varint,24,opt,name=CanDegrade,proto3" json:"CanDegrade,omitempty"`
	Modifications      []*Modification `protobuf:"bytes,25,rep,name=Modifications,proto3" json:"Modifications,omitempty"`
}

func (x *RefWeapon) Reset() {
	*x = RefWeapon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefWeapon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefWeapon) ProtoMessage() {}

func (x *RefWeapon) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefWeapon.ProtoReflect.Descriptor instead.
func (*RefWeapon) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{32}
}

func (x *RefWeapon) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RefWeapon) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RefWeapon) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RefWeapon) GetDamage1H() string {
	if x != nil {
		return x.Damage1H
	}
	return ""
}

func (x *RefWeapon) GetDamage2H() string {
	if x != nil {
		return x.Damage2H
	}
	return ""
}

func (x *RefWeapon) GetBaseWeaponAccuracy() int32 {
	if x != nil {
		return x.BaseWeaponAccuracy
	}
	return 0
}

func (x *RefWeapon) GetDefenseModifier() int32 {
	if x != nil {
		return x.DefenseModifier
	}
	return 0
}

func (x *RefWeapon) GetDefenseType() DefenseType {
	if x != nil {
		return x.DefenseType
	}
	return DefenseType_Unknown
}

func (x *RefWeapon) GetCost() *MonetaryAmount {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *RefWeapon) GetRarity() Rarity {
	if x != nil {
		return x.Rarity
	}
	return Rarity_Rarity_UNK
}

func (x *RefWeapon) GetRangeFt() int32 {
	if x != nil {
		return x.RangeFt
	}
	return 0
}

func (x *RefWeapon) GetRequiredSkill() string {
	if x != nil {
		return x.RequiredSkill
	}
	return ""
}

func (x *RefWeapon) GetMelee() bool {
	if x != nil {
		return x.Melee
	}
	return false
}

func (x *RefWeapon) GetRanged() bool {
	if x != nil {
		return x.Ranged
	}
	return false
}

func (x *RefWeapon) GetWield1Hand() bool {
	if x != nil {
		return x.Wield1Hand
	}
	return false
}

func (x *RefWeapon) GetWield2Hand() bool {
	if x != nil {
		return x.Wield2Hand
	}
	return false
}

func (x *RefWeapon) GetPicture() *IconPicture {
	if x != nil {
		return x.Picture
	}
	return nil
}

func (x *RefWeapon) GetCanBlock() bool {
	if x != nil {
		return x.CanBlock
	}
	return false
}

func (x *RefWeapon) GetCanParry() bool {
	if x != nil {
		return x.CanParry
	}
	return false
}

func (x *RefWeapon) GetParryMod() int32 {
	if x != nil {
		return x.ParryMod
	}
	return 0
}

func (x *RefWeapon) GetBlockMod() int32 {
	if x != nil {
		return x.BlockMod
	}
	return 0
}

func (x *RefWeapon) GetBlockSP() int32 {
	if x != nil {
		return x.BlockSP
	}
	return 0
}

func (x *RefWeapon) GetCanDegrade() bool {
	if x != nil {
		return x.CanDegrade
	}
	return false
}

func (x *RefWeapon) GetModifications() []*Modification {
	if x != nil {
		return x.Modifications
	}
	return nil
}

type RefGameTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Type        string `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
	EnumValue   int32  `protobuf:"varint,5,opt,name=EnumValue,proto3" json:"EnumValue,omitempty"` // Value of the Enum (like Rarity)
}

func (x *RefGameTerm) Reset() {
	*x = RefGameTerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefGameTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefGameTerm) ProtoMessage() {}

func (x *RefGameTerm) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefGameTerm.ProtoReflect.Descriptor instead.
func (*RefGameTerm) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{33}
}

func (x *RefGameTerm) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RefGameTerm) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RefGameTerm) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RefGameTerm) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RefGameTerm) GetEnumValue() int32 {
	if x != nil {
		return x.EnumValue
	}
	return 0
}

type Weapon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             string          `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name           string          `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"` // CUstom Name
	Notes          string          `protobuf:"bytes,3,opt,name=Notes,proto3" json:"Notes,omitempty"`
	RefID          string          `protobuf:"bytes,4,opt,name=RefID,proto3" json:"RefID,omitempty"`
	Quality        Quality         `protobuf:"varint,5,opt,name=Quality,proto3,enum=fp2.Quality" json:"Quality,omitempty"`
	Picture        *IconPicture    `protobuf:"bytes,6,opt,name=Picture,proto3" json:"Picture,omitempty"`
	Carried        bool            `protobuf:"varint,7,opt,name=Carried,proto3" json:"Carried,omitempty"`
	Equipped       bool            `protobuf:"varint,8,opt,name=Equipped,proto3" json:"Equipped,omitempty"`
	ParryMod       int32           `protobuf:"varint,9,opt,name=ParryMod,proto3" json:"ParryMod,omitempty"`
	BlockMod       int32           `protobuf:"varint,10,opt,name=BlockMod,proto3" json:"BlockMod,omitempty"`
	BlockSP        int32           `protobuf:"varint,11,opt,name=BlockSP,proto3" json:"BlockSP,omitempty"`
	WeaponAccuracy int32           `protobuf:"varint,13,opt,name=WeaponAccuracy,proto3" json:"WeaponAccuracy,omitempty"`
	Degraded       bool            `protobuf:"varint,14,opt,name=Degraded,proto3" json:"Degraded,omitempty"`
	Modifications  []*Modification `protobuf:"bytes,15,rep,name=Modifications,proto3" json:"Modifications,omitempty"`
}

func (x *Weapon) Reset() {
	*x = Weapon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Weapon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Weapon) ProtoMessage() {}

func (x *Weapon) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Weapon.ProtoReflect.Descriptor instead.
func (*Weapon) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{34}
}

func (x *Weapon) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Weapon) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Weapon) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Weapon) GetRefID() string {
	if x != nil {
		return x.RefID
	}
	return ""
}

func (x *Weapon) GetQuality() Quality {
	if x != nil {
		return x.Quality
	}
	return Quality_Quality_UNK
}

func (x *Weapon) GetPicture() *IconPicture {
	if x != nil {
		return x.Picture
	}
	return nil
}

func (x *Weapon) GetCarried() bool {
	if x != nil {
		return x.Carried
	}
	return false
}

func (x *Weapon) GetEquipped() bool {
	if x != nil {
		return x.Equipped
	}
	return false
}

func (x *Weapon) GetParryMod() int32 {
	if x != nil {
		return x.ParryMod
	}
	return 0
}

func (x *Weapon) GetBlockMod() int32 {
	if x != nil {
		return x.BlockMod
	}
	return 0
}

func (x *Weapon) GetBlockSP() int32 {
	if x != nil {
		return x.BlockSP
	}
	return 0
}

func (x *Weapon) GetWeaponAccuracy() int32 {
	if x != nil {
		return x.WeaponAccuracy
	}
	return 0
}

func (x *Weapon) GetDegraded() bool {
	if x != nil {
		return x.Degraded
	}
	return false
}

func (x *Weapon) GetModifications() []*Modification {
	if x != nil {
		return x.Modifications
	}
	return nil
}

type RefArmor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            string          `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string          `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description   string          `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	SP            int32           `protobuf:"varint,4,opt,name=SP,proto3" json:"SP,omitempty"`
	CanDegrade    bool            `protobuf:"varint,5,opt,name=CanDegrade,proto3" json:"CanDegrade,omitempty"`
	Material      string          `protobuf:"bytes,6,opt,name=Material,proto3" json:"Material,omitempty"`
	Cost          *MonetaryAmount `protobuf:"bytes,7,opt,name=Cost,proto3" json:"Cost,omitempty"`
	CanStack      bool            `protobuf:"varint,8,opt,name=CanStack,proto3" json:"CanStack,omitempty"`
	RefPenalty    int32           `protobuf:"varint,9,opt,name=RefPenalty,proto3" json:"RefPenalty,omitempty"`
	Modifications []*Modification `protobuf:"bytes,10,rep,name=Modifications,proto3" json:"Modifications,omitempty"`
}

func (x *RefArmor) Reset() {
	*x = RefArmor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefArmor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefArmor) ProtoMessage() {}

func (x *RefArmor) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefArmor.ProtoReflect.Descriptor instead.
func (*RefArmor) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{35}
}

func (x *RefArmor) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RefArmor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RefArmor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RefArmor) GetSP() int32 {
	if x != nil {
		return x.SP
	}
	return 0
}

func (x *RefArmor) GetCanDegrade() bool {
	if x != nil {
		return x.CanDegrade
	}
	return false
}

func (x *RefArmor) GetMaterial() string {
	if x != nil {
		return x.Material
	}
	return ""
}

func (x *RefArmor) GetCost() *MonetaryAmount {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *RefArmor) GetCanStack() bool {
	if x != nil {
		return x.CanStack
	}
	return false
}

func (x *RefArmor) GetRefPenalty() int32 {
	if x != nil {
		return x.RefPenalty
	}
	return 0
}

func (x *RefArmor) GetModifications() []*Modification {
	if x != nil {
		return x.Modifications
	}
	return nil
}

type Armor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            string          `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string          `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"` // CUstom Name
	Notes         string          `protobuf:"bytes,3,opt,name=Notes,proto3" json:"Notes,omitempty"`
	RefID         string          `protobuf:"bytes,4,opt,name=RefID,proto3" json:"RefID,omitempty"`
	Picture       *IconPicture    `protobuf:"bytes,6,opt,name=Picture,proto3" json:"Picture,omitempty"`
	Equipped      bool            `protobuf:"varint,8,opt,name=Equipped,proto3" json:"Equipped,omitempty"`
	Degraded      bool            `protobuf:"varint,9,opt,name=Degraded,proto3" json:"Degraded,omitempty"`
	SP            int32           `protobuf:"varint,10,opt,name=SP,proto3" json:"SP,omitempty"`
	Quality       Quality         `protobuf:"varint,11,opt,name=Quality,proto3,enum=fp2.Quality" json:"Quality,omitempty"`
	CanDegrade    BooleanValue    `protobuf:"varint,12,opt,name=CanDegrade,proto3,enum=fp2.BooleanValue" json:"CanDegrade,omitempty"`
	Modifications []*Modification `protobuf:"bytes,13,rep,name=Modifications,proto3" json:"Modifications,omitempty"`
}

func (x *Armor) Reset() {
	*x = Armor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Armor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Armor) ProtoMessage() {}

func (x *Armor) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Armor.ProtoReflect.Descriptor instead.
func (*Armor) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{36}
}

func (x *Armor) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Armor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Armor) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Armor) GetRefID() string {
	if x != nil {
		return x.RefID
	}
	return ""
}

func (x *Armor) GetPicture() *IconPicture {
	if x != nil {
		return x.Picture
	}
	return nil
}

func (x *Armor) GetEquipped() bool {
	if x != nil {
		return x.Equipped
	}
	return false
}

func (x *Armor) GetDegraded() bool {
	if x != nil {
		return x.Degraded
	}
	return false
}

func (x *Armor) GetSP() int32 {
	if x != nil {
		return x.SP
	}
	return 0
}

func (x *Armor) GetQuality() Quality {
	if x != nil {
		return x.Quality
	}
	return Quality_Quality_UNK
}

func (x *Armor) GetCanDegrade() BooleanValue {
	if x != nil {
		return x.CanDegrade
	}
	return BooleanValue_BooleanValue_UNK
}

func (x *Armor) GetModifications() []*Modification {
	if x != nil {
		return x.Modifications
	}
	return nil
}

type DiceRollResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rolls     []*DiceRollResult `protobuf:"bytes,1,rep,name=Rolls,proto3" json:"Rolls,omitempty"`
	Total     int32             `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
	Modifiers []*RollModifier   `protobuf:"bytes,3,rep,name=Modifiers,proto3" json:"Modifiers,omitempty"`
}

func (x *DiceRollResults) Reset() {
	*x = DiceRollResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiceRollResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiceRollResults) ProtoMessage() {}

func (x *DiceRollResults) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiceRollResults.ProtoReflect.Descriptor instead.
func (*DiceRollResults) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{37}
}

func (x *DiceRollResults) GetRolls() []*DiceRollResult {
	if x != nil {
		return x.Rolls
	}
	return nil
}

func (x *DiceRollResults) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DiceRollResults) GetModifiers() []*RollModifier {
	if x != nil {
		return x.Modifiers
	}
	return nil
}

type DiceRollResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dice    *Die             `protobuf:"bytes,3,opt,name=Dice,proto3" json:"Dice,omitempty"`
	Results []*DieRollResult `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *DiceRollResult) Reset() {
	*x = DiceRollResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiceRollResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiceRollResult) ProtoMessage() {}

func (x *DiceRollResult) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiceRollResult.ProtoReflect.Descriptor instead.
func (*DiceRollResult) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{38}
}

func (x *DiceRollResult) GetDice() *Die {
	if x != nil {
		return x.Dice
	}
	return nil
}

func (x *DiceRollResult) GetResults() []*DieRollResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type DieRollResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    int32 `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Exploded bool  `protobuf:"varint,2,opt,name=Exploded,proto3" json:"Exploded,omitempty"`
	ReRolled bool  `protobuf:"varint,3,opt,name=ReRolled,proto3" json:"ReRolled,omitempty"`
}

func (x *DieRollResult) Reset() {
	*x = DieRollResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DieRollResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DieRollResult) ProtoMessage() {}

func (x *DieRollResult) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DieRollResult.ProtoReflect.Descriptor instead.
func (*DieRollResult) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{39}
}

func (x *DieRollResult) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DieRollResult) GetExploded() bool {
	if x != nil {
		return x.Exploded
	}
	return false
}

func (x *DieRollResult) GetReRolled() bool {
	if x != nil {
		return x.ReRolled
	}
	return false
}

type DiceRoll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dice      []*Die          `protobuf:"bytes,1,rep,name=Dice,proto3" json:"Dice,omitempty"`
	Modifiers []*RollModifier `protobuf:"bytes,2,rep,name=Modifiers,proto3" json:"Modifiers,omitempty"`
}

func (x *DiceRoll) Reset() {
	*x = DiceRoll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiceRoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiceRoll) ProtoMessage() {}

func (x *DiceRoll) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiceRoll.ProtoReflect.Descriptor instead.
func (*DiceRoll) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{40}
}

func (x *DiceRoll) GetDice() []*Die {
	if x != nil {
		return x.Dice
	}
	return nil
}

func (x *DiceRoll) GetModifiers() []*RollModifier {
	if x != nil {
		return x.Modifiers
	}
	return nil
}

type Die struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount    int32  `protobuf:"varint,1,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Sides     int32  `protobuf:"varint,2,opt,name=Sides,proto3" json:"Sides,omitempty"`
	Explode   bool   `protobuf:"varint,3,opt,name=Explode,proto3" json:"Explode,omitempty"`
	ReRollMin bool   `protobuf:"varint,4,opt,name=ReRollMin,proto3" json:"ReRollMin,omitempty"`
	Tag       string `protobuf:"bytes,5,opt,name=Tag,proto3" json:"Tag,omitempty"`
}

func (x *Die) Reset() {
	*x = Die{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Die) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Die) ProtoMessage() {}

func (x *Die) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Die.ProtoReflect.Descriptor instead.
func (*Die) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{41}
}

func (x *Die) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Die) GetSides() int32 {
	if x != nil {
		return x.Sides
	}
	return 0
}

func (x *Die) GetExplode() bool {
	if x != nil {
		return x.Explode
	}
	return false
}

func (x *Die) GetReRollMin() bool {
	if x != nil {
		return x.ReRollMin
	}
	return false
}

func (x *Die) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type RollModifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modifier int32  `protobuf:"varint,1,opt,name=Modifier,proto3" json:"Modifier,omitempty"`
	Tag      string `protobuf:"bytes,2,opt,name=Tag,proto3" json:"Tag,omitempty"`
	Multiply bool   `protobuf:"varint,3,opt,name=Multiply,proto3" json:"Multiply,omitempty"`
	Divide   bool   `protobuf:"varint,4,opt,name=Divide,proto3" json:"Divide,omitempty"`
}

func (x *RollModifier) Reset() {
	*x = RollModifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollModifier) ProtoMessage() {}

func (x *RollModifier) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollModifier.ProtoReflect.Descriptor instead.
func (*RollModifier) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{42}
}

func (x *RollModifier) GetModifier() int32 {
	if x != nil {
		return x.Modifier
	}
	return 0
}

func (x *RollModifier) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *RollModifier) GetMultiply() bool {
	if x != nil {
		return x.Multiply
	}
	return false
}

func (x *RollModifier) GetDivide() bool {
	if x != nil {
		return x.Divide
	}
	return false
}

type PerformAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//
	//	*PerformAction_Attack
	Action      isPerformAction_Action `protobuf_oneof:"Action"`
	ActionType  ActionType             `protobuf:"varint,2,opt,name=ActionType,proto3,enum=fp2.ActionType" json:"ActionType,omitempty"`
	Actions     int32                  `protobuf:"varint,3,opt,name=Actions,proto3" json:"Actions,omitempty"`
	CharacterID string                 `protobuf:"bytes,4,opt,name=CharacterID,proto3" json:"CharacterID,omitempty"`
}

func (x *PerformAction) Reset() {
	*x = PerformAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformAction) ProtoMessage() {}

func (x *PerformAction) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformAction.ProtoReflect.Descriptor instead.
func (*PerformAction) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{43}
}

func (m *PerformAction) GetAction() isPerformAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *PerformAction) GetAttack() *Attack {
	if x, ok := x.GetAction().(*PerformAction_Attack); ok {
		return x.Attack
	}
	return nil
}

func (x *PerformAction) GetActionType() ActionType {
	if x != nil {
		return x.ActionType
	}
	return ActionType_ActionType_Unknown
}

func (x *PerformAction) GetActions() int32 {
	if x != nil {
		return x.Actions
	}
	return 0
}

func (x *PerformAction) GetCharacterID() string {
	if x != nil {
		return x.CharacterID
	}
	return ""
}

type isPerformAction_Action interface {
	isPerformAction_Action()
}

type PerformAction_Attack struct {
	Attack *Attack `protobuf:"bytes,1,opt,name=Attack,proto3,oneof"`
}

func (*PerformAction_Attack) isPerformAction_Action() {}

// Message Request for a piece of reference information
type ReferenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ReferenceType `protobuf:"varint,1,opt,name=Type,proto3,enum=fp2.ReferenceType" json:"Type,omitempty"`
	ID   string        `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ReferenceRequest) Reset() {
	*x = ReferenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceRequest) ProtoMessage() {}

func (x *ReferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceRequest.ProtoReflect.Descriptor instead.
func (*ReferenceRequest) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{44}
}

func (x *ReferenceRequest) GetType() ReferenceType {
	if x != nil {
		return x.Type
	}
	return ReferenceType_ReferenceType_Unknown
}

func (x *ReferenceRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ReferenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reference:
	//
	//	*ReferenceResponse_Skill
	//	*ReferenceResponse_GameTerm
	//	*ReferenceResponse_Weapon
	Reference isReferenceResponse_Reference `protobuf_oneof:"Reference"`
}

func (x *ReferenceResponse) Reset() {
	*x = ReferenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceResponse) ProtoMessage() {}

func (x *ReferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceResponse.ProtoReflect.Descriptor instead.
func (*ReferenceResponse) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{45}
}

func (m *ReferenceResponse) GetReference() isReferenceResponse_Reference {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (x *ReferenceResponse) GetSkill() *RefSkill {
	if x, ok := x.GetReference().(*ReferenceResponse_Skill); ok {
		return x.Skill
	}
	return nil
}

func (x *ReferenceResponse) GetGameTerm() *RefGameTerm {
	if x, ok := x.GetReference().(*ReferenceResponse_GameTerm); ok {
		return x.GameTerm
	}
	return nil
}

func (x *ReferenceResponse) GetWeapon() *RefWeapon {
	if x, ok := x.GetReference().(*ReferenceResponse_Weapon); ok {
		return x.Weapon
	}
	return nil
}

type isReferenceResponse_Reference interface {
	isReferenceResponse_Reference()
}

type ReferenceResponse_Skill struct {
	Skill *RefSkill `protobuf:"bytes,1,opt,name=Skill,proto3,oneof"`
}

type ReferenceResponse_GameTerm struct {
	GameTerm *RefGameTerm `protobuf:"bytes,3,opt,name=GameTerm,proto3,oneof"`
}

type ReferenceResponse_Weapon struct {
	Weapon *RefWeapon `protobuf:"bytes,4,opt,name=Weapon,proto3,oneof"`
}

func (*ReferenceResponse_Skill) isReferenceResponse_Reference() {}

func (*ReferenceResponse_GameTerm) isReferenceResponse_Reference() {}

func (*ReferenceResponse_Weapon) isReferenceResponse_Reference() {}

type Modification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       ModificationType `protobuf:"varint,1,opt,name=Type,proto3,enum=fp2.ModificationType" json:"Type,omitempty"`
	Amount     int32            `protobuf:"varint,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Category   string           `protobuf:"bytes,3,opt,name=Category,proto3" json:"Category,omitempty"`
	IDAffected string           `protobuf:"bytes,4,opt,name=IDAffected,proto3" json:"IDAffected,omitempty"`
}

func (x *Modification) Reset() {
	*x = Modification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Modification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Modification) ProtoMessage() {}

func (x *Modification) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Modification.ProtoReflect.Descriptor instead.
func (*Modification) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{46}
}

func (x *Modification) GetType() ModificationType {
	if x != nil {
		return x.Type
	}
	return ModificationType_MT_UNK
}

func (x *Modification) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Modification) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Modification) GetIDAffected() string {
	if x != nil {
		return x.IDAffected
	}
	return ""
}

// Used to send multuple updates. Batched updates will delay the calculaiion
// process until all updates have been saved and there will be only a single
// update per affected object instead of possibly n updates. It is possible
// to include the same object multiple times. In that case the last object
// instance will be the one that gets saved. No attempt at patching with
// this approach
type BatchUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates []*UpdateRequest `protobuf:"bytes,2,rep,name=Updates,proto3" json:"Updates,omitempty"`
}

func (x *BatchUpdateRequest) Reset() {
	*x = BatchUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateRequest) ProtoMessage() {}

func (x *BatchUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateRequest.ProtoReflect.Descriptor instead.
func (*BatchUpdateRequest) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{47}
}

func (x *BatchUpdateRequest) GetUpdates() []*UpdateRequest {
	if x != nil {
		return x.Updates
	}
	return nil
}

// Sent from the Client to the Server when the client has made a change
// This may be too general, but is good for now. No attempt at patching with
// this approach
type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type UpdateType `protobuf:"varint,5,opt,name=Type,proto3,enum=fp2.UpdateType" json:"Type,omitempty"`
	// Types that are assignable to Data:
	//
	//	*UpdateRequest_RefArmor
	//	*UpdateRequest_RefGameTerm
	//	*UpdateRequest_RefSkill
	//	*UpdateRequest_RefWeapon
	//	*UpdateRequest_Character
	//	*UpdateRequest_Encounter
	Data isUpdateRequest_Data `protobuf_oneof:"Data"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{48}
}

func (x *UpdateRequest) GetType() UpdateType {
	if x != nil {
		return x.Type
	}
	return UpdateType_UT_Save
}

func (m *UpdateRequest) GetData() isUpdateRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *UpdateRequest) GetRefArmor() *RefArmor {
	if x, ok := x.GetData().(*UpdateRequest_RefArmor); ok {
		return x.RefArmor
	}
	return nil
}

func (x *UpdateRequest) GetRefGameTerm() *RefGameTerm {
	if x, ok := x.GetData().(*UpdateRequest_RefGameTerm); ok {
		return x.RefGameTerm
	}
	return nil
}

func (x *UpdateRequest) GetRefSkill() *RefSkill {
	if x, ok := x.GetData().(*UpdateRequest_RefSkill); ok {
		return x.RefSkill
	}
	return nil
}

func (x *UpdateRequest) GetRefWeapon() *RefWeapon {
	if x, ok := x.GetData().(*UpdateRequest_RefWeapon); ok {
		return x.RefWeapon
	}
	return nil
}

func (x *UpdateRequest) GetCharacter() *Character {
	if x, ok := x.GetData().(*UpdateRequest_Character); ok {
		return x.Character
	}
	return nil
}

func (x *UpdateRequest) GetEncounter() *Encounter {
	if x, ok := x.GetData().(*UpdateRequest_Encounter); ok {
		return x.Encounter
	}
	return nil
}

type isUpdateRequest_Data interface {
	isUpdateRequest_Data()
}

type UpdateRequest_RefArmor struct {
	// References (not meant to be uodated during a game)
	RefArmor *RefArmor `protobuf:"bytes,7,opt,name=RefArmor,proto3,oneof"`
}

type UpdateRequest_RefGameTerm struct {
	RefGameTerm *RefGameTerm `protobuf:"bytes,8,opt,name=RefGameTerm,proto3,oneof"`
}

type UpdateRequest_RefSkill struct {
	RefSkill *RefSkill `protobuf:"bytes,9,opt,name=RefSkill,proto3,oneof"`
}

type UpdateRequest_RefWeapon struct {
	RefWeapon *RefWeapon `protobuf:"bytes,10,opt,name=RefWeapon,proto3,oneof"`
}

type UpdateRequest_Character struct {
	// Entities
	Character *Character `protobuf:"bytes,50,opt,name=Character,proto3,oneof"`
}

type UpdateRequest_Encounter struct {
	Encounter *Encounter `protobuf:"bytes,51,opt,name=Encounter,proto3,oneof"`
}

func (*UpdateRequest_RefArmor) isUpdateRequest_Data() {}

func (*UpdateRequest_RefGameTerm) isUpdateRequest_Data() {}

func (*UpdateRequest_RefSkill) isUpdateRequest_Data() {}

func (*UpdateRequest_RefWeapon) isUpdateRequest_Data() {}

func (*UpdateRequest_Character) isUpdateRequest_Data() {}

func (*UpdateRequest_Encounter) isUpdateRequest_Data() {}

// Sent to the Client when a model has changed. This is either from
// a save or from a calculation. No attempt at patching with
// this approach
type ModelChangedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type UpdateType `protobuf:"varint,5,opt,name=Type,proto3,enum=fp2.UpdateType" json:"Type,omitempty"`
	// Types that are assignable to Data:
	//
	//	*ModelChangedEvent_RefArmor
	//	*ModelChangedEvent_RefGameTerm
	//	*ModelChangedEvent_RefSkill
	//	*ModelChangedEvent_RefWeapon
	//	*ModelChangedEvent_Character
	//	*ModelChangedEvent_Encounter
	Data isModelChangedEvent_Data `protobuf_oneof:"Data"`
}

func (x *ModelChangedEvent) Reset() {
	*x = ModelChangedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelChangedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelChangedEvent) ProtoMessage() {}

func (x *ModelChangedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelChangedEvent.ProtoReflect.Descriptor instead.
func (*ModelChangedEvent) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{49}
}

func (x *ModelChangedEvent) GetType() UpdateType {
	if x != nil {
		return x.Type
	}
	return UpdateType_UT_Save
}

func (m *ModelChangedEvent) GetData() isModelChangedEvent_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *ModelChangedEvent) GetRefArmor() *RefArmor {
	if x, ok := x.GetData().(*ModelChangedEvent_RefArmor); ok {
		return x.RefArmor
	}
	return nil
}

func (x *ModelChangedEvent) GetRefGameTerm() *RefGameTerm {
	if x, ok := x.GetData().(*ModelChangedEvent_RefGameTerm); ok {
		return x.RefGameTerm
	}
	return nil
}

func (x *ModelChangedEvent) GetRefSkill() *RefSkill {
	if x, ok := x.GetData().(*ModelChangedEvent_RefSkill); ok {
		return x.RefSkill
	}
	return nil
}

func (x *ModelChangedEvent) GetRefWeapon() *RefWeapon {
	if x, ok := x.GetData().(*ModelChangedEvent_RefWeapon); ok {
		return x.RefWeapon
	}
	return nil
}

func (x *ModelChangedEvent) GetCharacter() *Character {
	if x, ok := x.GetData().(*ModelChangedEvent_Character); ok {
		return x.Character
	}
	return nil
}

func (x *ModelChangedEvent) GetEncounter() *Encounter {
	if x, ok := x.GetData().(*ModelChangedEvent_Encounter); ok {
		return x.Encounter
	}
	return nil
}

type isModelChangedEvent_Data interface {
	isModelChangedEvent_Data()
}

type ModelChangedEvent_RefArmor struct {
	// References (not meant to be uodated during a game)
	RefArmor *RefArmor `protobuf:"bytes,7,opt,name=RefArmor,proto3,oneof"`
}

type ModelChangedEvent_RefGameTerm struct {
	RefGameTerm *RefGameTerm `protobuf:"bytes,8,opt,name=RefGameTerm,proto3,oneof"`
}

type ModelChangedEvent_RefSkill struct {
	RefSkill *RefSkill `protobuf:"bytes,9,opt,name=RefSkill,proto3,oneof"`
}

type ModelChangedEvent_RefWeapon struct {
	RefWeapon *RefWeapon `protobuf:"bytes,10,opt,name=RefWeapon,proto3,oneof"`
}

type ModelChangedEvent_Character struct {
	// Entities
	Character *Character `protobuf:"bytes,50,opt,name=Character,proto3,oneof"`
}

type ModelChangedEvent_Encounter struct {
	Encounter *Encounter `protobuf:"bytes,51,opt,name=Encounter,proto3,oneof"`
}

func (*ModelChangedEvent_RefArmor) isModelChangedEvent_Data() {}

func (*ModelChangedEvent_RefGameTerm) isModelChangedEvent_Data() {}

func (*ModelChangedEvent_RefSkill) isModelChangedEvent_Data() {}

func (*ModelChangedEvent_RefWeapon) isModelChangedEvent_Data() {}

func (*ModelChangedEvent_Character) isModelChangedEvent_Data() {}

func (*ModelChangedEvent_Encounter) isModelChangedEvent_Data() {}

type Orb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Notes   string `protobuf:"bytes,3,opt,name=Notes,proto3" json:"Notes,omitempty"`
	RefID   string `protobuf:"bytes,4,opt,name=RefID,proto3" json:"RefID,omitempty"`
	Level   int32  `protobuf:"varint,5,opt,name=Level,proto3" json:"Level,omitempty"`
	IPs     int32  `protobuf:"varint,6,opt,name=IPs,proto3" json:"IPs,omitempty"`
	Slotted bool   `protobuf:"varint,7,opt,name=slotted,proto3" json:"slotted,omitempty"`
}

func (x *Orb) Reset() {
	*x = Orb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Orb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Orb) ProtoMessage() {}

func (x *Orb) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Orb.ProtoReflect.Descriptor instead.
func (*Orb) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{50}
}

func (x *Orb) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Orb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Orb) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Orb) GetRefID() string {
	if x != nil {
		return x.RefID
	}
	return ""
}

func (x *Orb) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Orb) GetIPs() int32 {
	if x != nil {
		return x.IPs
	}
	return 0
}

func (x *Orb) GetSlotted() bool {
	if x != nil {
		return x.Slotted
	}
	return false
}

type RefOrb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                 string              `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name               string              `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description        string              `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Type               OrbType             `protobuf:"varint,4,opt,name=Type,proto3,enum=fp2.OrbType" json:"Type,omitempty"`
	Rarity             Rarity              `protobuf:"varint,5,opt,name=Rarity,proto3,enum=fp2.Rarity" json:"Rarity,omitempty"`
	Picture            *IconPicture        `protobuf:"bytes,6,opt,name=Picture,proto3" json:"Picture,omitempty"`
	SpellAttributeType PrimaryAttributeVal `protobuf:"varint,7,opt,name=SpellAttributeType,proto3,enum=fp2.PrimaryAttributeVal" json:"SpellAttributeType,omitempty"`
	SpellSchool        string              `protobuf:"bytes,8,opt,name=SpellSchool,proto3" json:"SpellSchool,omitempty"`
	Abilities          []*Ability          `protobuf:"bytes,1100,rep,name=Abilities,proto3" json:"Abilities,omitempty"`
}

func (x *RefOrb) Reset() {
	*x = RefOrb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_models_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefOrb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefOrb) ProtoMessage() {}

func (x *RefOrb) ProtoReflect() protoreflect.Message {
	mi := &file_models_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefOrb.ProtoReflect.Descriptor instead.
func (*RefOrb) Descriptor() ([]byte, []int) {
	return file_models_proto_rawDescGZIP(), []int{51}
}

func (x *RefOrb) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RefOrb) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RefOrb) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RefOrb) GetType() OrbType {
	if x != nil {
		return x.Type
	}
	return OrbType_OrbType_Unk
}

func (x *RefOrb) GetRarity() Rarity {
	if x != nil {
		return x.Rarity
	}
	return Rarity_Rarity_UNK
}

func (x *RefOrb) GetPicture() *IconPicture {
	if x != nil {
		return x.Picture
	}
	return nil
}

func (x *RefOrb) GetSpellAttributeType() PrimaryAttributeVal {
	if x != nil {
		return x.SpellAttributeType
	}
	return PrimaryAttributeVal_PrimaryAttributeVal_UNK
}

func (x *RefOrb) GetSpellSchool() string {
	if x != nil {
		return x.SpellSchool
	}
	return ""
}

func (x *RefOrb) GetAbilities() []*Ability {
	if x != nil {
		return x.Abilities
	}
	return nil
}

var File_models_proto protoreflect.FileDescriptor

var file_models_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03,
	0x66, 0x70, 0x32, 0x22, 0xed, 0x04, 0x0a, 0x0a, 0x46, 0x70, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x2e, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x06, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52,
	0x06, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x37, 0x0a, 0x0c, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x66, 0x70, 0x32, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x48, 0x00, 0x52, 0x0c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x43, 0x0a, 0x10, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x70, 0x32,
	0x2e, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x10, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x18, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x44, 0x65,
	0x66, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x18, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73,
	0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66,
	0x70, 0x32, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x22, 0xb7, 0x03, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x07, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x70, 0x32,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x66, 0x70, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x12, 0x22, 0x0a, 0x06, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x06,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x57, 0x65,
	0x61, 0x70, 0x6f, 0x6e, 0x52, 0x07, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a,
	0x06, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x66, 0x70, 0x32, 0x2e, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x52, 0x06, 0x41, 0x72, 0x6d, 0x6f, 0x72,
	0x73, 0x12, 0x2c, 0x0a, 0x0a, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x41, 0x66, 0x66, 0x69,
	0x6e, 0x74, 0x79, 0x52, 0x0a, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x04, 0x4f, 0x72, 0x62, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x66, 0x70, 0x32, 0x2e, 0x4f, 0x72, 0x62, 0x52, 0x04, 0x4f, 0x72, 0x62, 0x73, 0x22, 0x39, 0x0a,
	0x07, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x6f,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xa0, 0x03, 0x0a, 0x11, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c,
	0x0a, 0x19, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x19, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3a, 0x0a, 0x18,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x39,
	0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x4d, 0x6f, 0x6e, 0x65,
	0x74, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x66, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x38, 0x0a, 0x17, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x17, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0xcf, 0x01, 0x0a, 0x11,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x61, 0x63, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x52, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x52,
	0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x48, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x48, 0x61, 0x69, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x2a, 0x0a,
	0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x0b, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x07, 0x44, 0x69, 0x63, 0x65,
	0x4c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x70, 0x32, 0x2e,
	0x44, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x07, 0x44, 0x69, 0x63,
	0x65, 0x4c, 0x6f, 0x67, 0x12, 0x26, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x4c, 0x6f, 0x67, 0x52, 0x07, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x22, 0x35, 0x0a, 0x07,
	0x43, 0x68, 0x61, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x2a, 0x0a, 0x05, 0x52, 0x6f, 0x6c, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x44, 0x69, 0x63,
	0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x05, 0x52, 0x6f,
	0x6c, 0x6c, 0x73, 0x22, 0x39, 0x0a, 0x0b, 0x44, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x4c,
	0x6f, 0x67, 0x12, 0x2a, 0x0a, 0x05, 0x52, 0x6f, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x44, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x05, 0x52, 0x6f, 0x6c, 0x6c, 0x73, 0x22, 0x83,
	0x02, 0x0a, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x40, 0x0a, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x70, 0x32,
	0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x10, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x0f, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x55, 0x0a, 0x0f,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x6f, 0x6c, 0x6c, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x44, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x52, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x22, 0x53, 0x0a, 0x17, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x0f,
	0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x38, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x6f, 0x6c, 0x6c, 0x4d, 0x79, 0x4f, 0x77, 0x6e,
	0x44, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x52, 0x6f, 0x6c, 0x6c,
	0x4d, 0x79, 0x4f, 0x77, 0x6e, 0x44, 0x69, 0x63, 0x65, 0x22, 0x81, 0x05, 0x0a, 0x13, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x03, 0x42, 0x4f, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x66, 0x70, 0x32, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x03, 0x42, 0x4f, 0x44, 0x12, 0x29, 0x0a, 0x04, 0x57, 0x49,
	0x4c, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x04, 0x57, 0x49, 0x4c, 0x4c, 0x12, 0x27, 0x0a, 0x03, 0x52, 0x45, 0x46, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x03, 0x52, 0x45, 0x46, 0x12, 0x27,
	0x0a, 0x03, 0x56, 0x49, 0x54, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x70,
	0x32, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x03, 0x56, 0x49, 0x54, 0x12, 0x27, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x03, 0x49, 0x4e, 0x54,
	0x12, 0x29, 0x0a, 0x04, 0x4c, 0x55, 0x43, 0x4b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x66, 0x70, 0x32, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x4c, 0x55, 0x43, 0x4b, 0x12, 0x29, 0x0a, 0x04, 0x54,
	0x45, 0x43, 0x48, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x70, 0x32, 0x2e,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x04, 0x54, 0x45, 0x43, 0x48, 0x12, 0x29, 0x0a, 0x04, 0x41, 0x54, 0x54, 0x52, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x41, 0x54, 0x54,
	0x52, 0x12, 0x27, 0x0a, 0x03, 0x45, 0x53, 0x53, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x66, 0x70, 0x32, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x03, 0x45, 0x53, 0x53, 0x12, 0x27, 0x0a, 0x03, 0x50, 0x45,
	0x52, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x03,
	0x50, 0x45, 0x52, 0x12, 0x2c, 0x0a, 0x04, 0x4d, 0x61, 0x6e, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x4d, 0x61, 0x6e,
	0x61, 0x12, 0x32, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x07, 0x53, 0x74,
	0x61, 0x6d, 0x69, 0x6e, 0x61, 0x12, 0x34, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x70, 0x32, 0x2e,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x41,
	0x77, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x66, 0x70, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x41, 0x77, 0x61, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x22, 0x68, 0x0a,
	0x10, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x61, 0x6c,
	0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x61,
	0x6c, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x65, 0x6e,
	0x50, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x52, 0x65, 0x67, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x22, 0x27, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa7,
	0x01, 0x0a, 0x06, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2f, 0x0a,
	0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x22, 0xf5, 0x02, 0x0a, 0x0c, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x66, 0x70, 0x32, 0x2e,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x2c,
	0x0a, 0x07, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22,
	0x0a, 0x0c, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x53, 0x50, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x53, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x53, 0x50, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x53, 0x50, 0x12, 0x24, 0x0a, 0x0d,
	0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x22, 0x73, 0x0a, 0x10, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x6b, 0x52, 0x06, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x0e, 0x44, 0x65, 0x66,
	0x65, 0x6e, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7b, 0x0a, 0x18, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x44, 0x65, 0x66, 0x65, 0x6e,
	0x73, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x44, 0x65, 0x66,
	0x65, 0x6e, 0x73, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0b, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x70, 0x32, 0x2e,
	0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x44, 0x65, 0x66,
	0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x66, 0x65,
	0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44,
	0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0xa4, 0x02, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x69, 0x6f, 0x75,
	0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x53,
	0x65, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x4d, 0x6f, 0x72, 0x74,
	0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x57, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x3d,
	0x0a, 0x11, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x70, 0x32, 0x2e,
	0x57, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x57, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x4e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x4d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x4e, 0x22, 0x67, 0x0a, 0x05, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x50, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x49, 0x50, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x6f, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x4d, 0x6f, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x82, 0x01, 0x0a, 0x18, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x20, 0x0a,
	0x05, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x66,
	0x70, 0x32, 0x2e, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x52, 0x05, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x41, 0x74, 0x74, 0x72, 0x42, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x41, 0x74, 0x74, 0x72, 0x42, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4d,
	0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x66, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x52, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x09,
	0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x09, 0x41,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x07, 0x41, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x6b,
	0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x43,
	0x61, 0x6e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d,
	0x43, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x57, 0x69, 0x74, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x43, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x22, 0x50, 0x0a, 0x0e, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x43, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x43, 0x50, 0x12, 0x0e, 0x0a, 0x02, 0x53, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x53, 0x50, 0x12, 0x0e, 0x0a, 0x02, 0x47, 0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x47, 0x50, 0x12, 0x0e, 0x0a, 0x02, 0x50, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x50, 0x50, 0x22, 0x3b, 0x0a, 0x0b, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x22, 0xa2, 0x06, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x31,
	0x48, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x31,
	0x48, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x48, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x48, 0x12, 0x2e, 0x0a,
	0x12, 0x42, 0x61, 0x73, 0x65, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x75, 0x72,
	0x61, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x42, 0x61, 0x73, 0x65, 0x57,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x28, 0x0a,
	0x0f, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0b, 0x44, 0x65, 0x66, 0x65, 0x6e,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66,
	0x70, 0x32, 0x2e, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x43,
	0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x70, 0x32, 0x2e,
	0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x04,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x52, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x06, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x46, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x46, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x65, 0x6c,
	0x65, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x4d, 0x65, 0x6c, 0x65, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x65, 0x6c, 0x64,
	0x31, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x57, 0x69, 0x65,
	0x6c, 0x64, 0x31, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x65, 0x6c, 0x64,
	0x32, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x57, 0x69, 0x65,
	0x6c, 0x64, 0x32, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x50, 0x69, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x49,
	0x63, 0x6f, 0x6e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x43, 0x61, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x1a, 0x0a, 0x08, 0x43, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x43, 0x61, 0x6e, 0x50, 0x61, 0x72, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x61, 0x72, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50,
	0x61, 0x72, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4d, 0x6f, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4d, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x50, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x50, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x61, 0x6e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x37, 0x0a,
	0x0d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x19,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x66, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb1,
	0x03, 0x0a, 0x06, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x66, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x52, 0x65, 0x66, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x07, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x66, 0x70, 0x32,
	0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x2a, 0x0a, 0x07, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x72, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x50, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x50, 0x12, 0x26, 0x0a, 0x0e, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x41,
	0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x57,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xba, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x66, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x53, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x53, 0x50, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x44, 0x65, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x44, 0x65,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x12, 0x27, 0x0a, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x04, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61,
	0x6e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x43, 0x61,
	0x6e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x66, 0x50, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x52, 0x65, 0x66, 0x50,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x66, 0x70, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xdf, 0x02, 0x0a, 0x05, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x66, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x52, 0x65, 0x66, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x07, 0x50, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x70, 0x32,
	0x2e, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x50, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x53, 0x50, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x53, 0x50, 0x12, 0x26, 0x0a,
	0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c,
	0x2e, 0x66, 0x70, 0x32, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x07, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x44, 0x65, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x66, 0x70, 0x32, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x43, 0x61,
	0x6e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x83, 0x01, 0x0a, 0x0f, 0x44, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x52, 0x6f, 0x6c, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x44, 0x69, 0x63, 0x65, 0x52,
	0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x52, 0x6f, 0x6c, 0x6c, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x70, 0x32, 0x2e,
	0x52, 0x6f, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x5c, 0x0a, 0x0e, 0x44, 0x69, 0x63, 0x65, 0x52,
	0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x44, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x44, 0x69,
	0x65, 0x52, 0x04, 0x44, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x44,
	0x69, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x5d, 0x0a, 0x0d, 0x44, 0x69, 0x65, 0x52, 0x6f, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x45, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x45, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x52, 0x6f,
	0x6c, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x52, 0x65, 0x52, 0x6f,
	0x6c, 0x6c, 0x65, 0x64, 0x22, 0x59, 0x0a, 0x08, 0x44, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x6c,
	0x12, 0x1c, 0x0a, 0x04, 0x44, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x66, 0x70, 0x32, 0x2e, 0x44, 0x69, 0x65, 0x52, 0x04, 0x44, 0x69, 0x63, 0x65, 0x12, 0x2f,
	0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22,
	0x7d, 0x0a, 0x03, 0x44, 0x69, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x69, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53,
	0x69, 0x64, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x52, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x4d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x52, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x4d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x54, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x22, 0x70,
	0x0a, 0x0c, 0x52, 0x6f, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x61,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x54, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x22, 0xad, 0x01, 0x0a, 0x0d, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x06, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x48,
	0x00, 0x52, 0x06, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x2f, 0x0a, 0x0a, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x66, 0x70, 0x32, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x4a, 0x0a, 0x10, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0xa1, 0x01, 0x0a,
	0x11, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x52, 0x65, 0x66, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x05, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x2e, 0x0a, 0x08, 0x47, 0x61, 0x6d,
	0x65, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x70,
	0x32, 0x2e, 0x52, 0x65, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x48, 0x00, 0x52,
	0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x28, 0x0a, 0x06, 0x57, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x70, 0x32, 0x2e,
	0x52, 0x65, 0x66, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x57, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x22, 0x8d, 0x01, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x44, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x44, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x22, 0x42, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x22, 0xdc, 0x02, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x52,
	0x65, 0x66, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x66, 0x70, 0x32, 0x2e, 0x52, 0x65, 0x66, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x08,
	0x52, 0x65, 0x66, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x52, 0x65, 0x66, 0x47,
	0x61, 0x6d, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x66, 0x70, 0x32, 0x2e, 0x52, 0x65, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x48,
	0x00, 0x52, 0x0b, 0x52, 0x65, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x2b,
	0x0a, 0x08, 0x52, 0x65, 0x66, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x52, 0x65, 0x66, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x08, 0x52, 0x65, 0x66, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x2e, 0x0a, 0x09, 0x52,
	0x65, 0x66, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x66, 0x70, 0x32, 0x2e, 0x52, 0x65, 0x66, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x09, 0x52, 0x65, 0x66, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x09, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x66, 0x70, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x09, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x09, 0x45,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x66, 0x70, 0x32, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x22, 0xe0, 0x02, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b,
	0x0a, 0x08, 0x52, 0x65, 0x66, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x52, 0x65, 0x66, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x08, 0x52, 0x65, 0x66, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x52,
	0x65, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x52, 0x65, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x65,
	0x72, 0x6d, 0x48, 0x00, 0x52, 0x0b, 0x52, 0x65, 0x66, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x72,
	0x6d, 0x12, 0x2b, 0x0a, 0x08, 0x52, 0x65, 0x66, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x52, 0x65, 0x66, 0x53, 0x6b, 0x69,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x52, 0x65, 0x66, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x2e,
	0x0a, 0x09, 0x52, 0x65, 0x66, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x52, 0x65, 0x66, 0x57, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x09, 0x52, 0x65, 0x66, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x09, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x09, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x06,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x97, 0x01, 0x0a, 0x03, 0x4f, 0x72, 0x62, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x65, 0x66, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x65, 0x66, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x50, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x49, 0x50, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x74, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x74, 0x65, 0x64,
	0x22, 0xda, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x66, 0x4f, 0x72, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x4f, 0x72, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x06, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x07, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x70, 0x32, 0x2e,
	0x49, 0x63, 0x6f, 0x6e, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x50, 0x69, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x52, 0x12, 0x53, 0x70, 0x65, 0x6c,
	0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x53, 0x63, 0x68, 0x6f, 0x6f, 0x6c,
	0x12, 0x2b, 0x0a, 0x09, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0xcc, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x66, 0x70, 0x32, 0x2e, 0x41, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x09, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2a, 0xfc, 0x01,
	0x0a, 0x19, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x21, 0x0a, 0x1d, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x55, 0x4e, 0x4b, 0x10, 0x00, 0x12, 0x21,
	0x0a, 0x1d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x52, 0x6f, 0x6f, 0x10,
	0x01, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x35, 0x30, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x36, 0x30, 0x10, 0x03, 0x12,
	0x25, 0x0a, 0x21, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x37, 0x30, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x5f, 0x4d, 0x61, 0x75, 0x6e, 0x61, 0x6c, 0x10, 0x05, 0x2a, 0x6d, 0x0a, 0x0a,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x03, 0x2a, 0xd8, 0x02, 0x0a, 0x13,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x5f, 0x55, 0x4e, 0x4b, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x5f, 0x42, 0x4f, 0x44, 0x10, 0x01, 0x12, 0x1c, 0x0a,
	0x18, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x5f, 0x57, 0x49, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x5f, 0x52, 0x45, 0x46, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x5f,
	0x56, 0x49, 0x54, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x5f, 0x49, 0x4e, 0x54,
	0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x5f, 0x4c, 0x55, 0x43, 0x4b, 0x10, 0x06,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x5f, 0x54, 0x45, 0x43, 0x48, 0x10, 0x07, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x5f, 0x45, 0x53, 0x53, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x5f, 0x50, 0x45, 0x52, 0x10, 0x0a, 0x2a, 0x51, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x65, 0x6c, 0x65, 0x65,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x45, 0x0a, 0x0b, 0x44, 0x65, 0x66,
	0x65, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x44, 0x6f, 0x64, 0x67, 0x65, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x72, 0x79, 0x10, 0x04,
	0x2a, 0x97, 0x01, 0x0a, 0x0a, 0x57, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x12, 0x57, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x6f, 0x75, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x57, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x57, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x53, 0x65, 0x72, 0x69, 0x6f, 0x75, 0x73, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x57, 0x6f,
	0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x4d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x10, 0x05, 0x2a, 0x8c, 0x01, 0x0a, 0x06, 0x52,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x55, 0x4e, 0x4b, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x52, 0x41, 0x52, 0x45, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x4c, 0x45, 0x47, 0x4f, 0x4e, 0x44, 0x41,
	0x52, 0x59, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x4d,
	0x59, 0x54, 0x48, 0x49, 0x43, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x06, 0x2a, 0x53, 0x0a, 0x0c, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x46, 0x61, 0x6c, 0x73, 0x65, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x54, 0x72, 0x75, 0x65, 0x10, 0x02, 0x2a, 0xc8,
	0x01, 0x0a, 0x14, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x44, 0x65, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x6f, 0x6e, 0x65, 0x74,
	0x61, 0x72, 0x79, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x55, 0x4e, 0x4b, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72,
	0x79, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x43, 0x50,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x44, 0x65,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x50, 0x10, 0x02, 0x12,
	0x1b, 0x0a, 0x17, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x44, 0x65, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x47, 0x50, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17,
	0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x50, 0x50, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x6f, 0x6e,
	0x65, 0x74, 0x61, 0x72, 0x79, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x05, 0x2a, 0xa5, 0x01, 0x0a, 0x0c, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x61, 0x6d,
	0x65, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e,
	0x5f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x4d, 0x6f, 0x6e, 0x65, 0x74,
	0x61, 0x72, 0x79, 0x5f, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x57, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x10,
	0x04, 0x2a, 0x92, 0x01, 0x0a, 0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0f, 0x0a,
	0x0b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x55, 0x4e, 0x4b, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x54, 0x72, 0x61, 0x73, 0x68, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x50, 0x6f, 0x6f,
	0x72, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x10, 0x04, 0x12, 0x11, 0x0a,
	0x0d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x10, 0x05,
	0x12, 0x14, 0x0a, 0x10, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x10, 0x06, 0x2a, 0x60, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x2a, 0x94, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x54,
	0x65, 0x72, 0x6d, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x10, 0x04, 0x2a,
	0xd8, 0x06, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x4d, 0x54, 0x5f, 0x57, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x54, 0x5f,
	0x57, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x53, 0x65, 0x72, 0x69, 0x6f,
	0x75, 0x73, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x54, 0x5f, 0x57, 0x6f, 0x75, 0x6e, 0x64,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x10, 0x03,
	0x12, 0x18, 0x0a, 0x14, 0x4d, 0x54, 0x5f, 0x57, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x73, 0x4d, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x54,
	0x5f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x4f, 0x44, 0x10, 0x06, 0x12,
	0x14, 0x0a, 0x10, 0x4d, 0x54, 0x5f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x57,
	0x49, 0x4c, 0x4c, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x54, 0x5f, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x45, 0x46, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x54,
	0x5f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x49, 0x54, 0x10, 0x09, 0x12,
	0x13, 0x0a, 0x0f, 0x4d, 0x54, 0x5f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x49,
	0x4e, 0x54, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x54, 0x5f, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x4c, 0x55, 0x43, 0x4b, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x54,
	0x5f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x45, 0x43, 0x48, 0x10, 0x0c,
	0x12, 0x14, 0x0a, 0x10, 0x4d, 0x54, 0x5f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x41, 0x54, 0x54, 0x52, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x54, 0x5f, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x45, 0x53, 0x53, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x4d,
	0x54, 0x5f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x50, 0x45, 0x52, 0x10, 0x0f,
	0x12, 0x17, 0x0a, 0x13, 0x4d, 0x54, 0x5f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x42, 0x4f, 0x44, 0x10, 0x10, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x54, 0x5f,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x57, 0x49, 0x4c,
	0x4c, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x54, 0x5f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x52, 0x45, 0x46, 0x10, 0x12, 0x12, 0x17, 0x0a, 0x13,
	0x4d, 0x54, 0x5f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x56, 0x49, 0x54, 0x10, 0x13, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x54, 0x5f, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x49, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x18,
	0x0a, 0x14, 0x4d, 0x54, 0x5f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x4c, 0x55, 0x43, 0x4b, 0x10, 0x15, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x54, 0x5f, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x54, 0x45, 0x43, 0x48,
	0x10, 0x16, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x54, 0x5f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x41, 0x54, 0x54, 0x52, 0x10, 0x17, 0x12, 0x17, 0x0a, 0x13,
	0x4d, 0x54, 0x5f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x45, 0x53, 0x53, 0x10, 0x18, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x54, 0x5f, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x50, 0x45, 0x52, 0x10, 0x19, 0x12, 0x0b,
	0x0a, 0x07, 0x4d, 0x54, 0x5f, 0x4d, 0x61, 0x6e, 0x61, 0x10, 0x1a, 0x12, 0x10, 0x0a, 0x0c, 0x4d,
	0x54, 0x5f, 0x4d, 0x61, 0x6e, 0x61, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x10, 0x1b, 0x12, 0x0e, 0x0a,
	0x0a, 0x4d, 0x54, 0x5f, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x10, 0x1c, 0x12, 0x13, 0x0a,
	0x0f, 0x4d, 0x54, 0x5f, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x52, 0x65, 0x67, 0x65, 0x6e,
	0x10, 0x1d, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x54, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x10, 0x1e, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x54, 0x5f, 0x41, 0x77, 0x61, 0x72,
	0x6e, 0x65, 0x73, 0x73, 0x10, 0x1f, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x54, 0x5f, 0x4d, 0x61, 0x6e,
	0x61, 0x5f, 0x54, 0x65, 0x6d, 0x70, 0x10, 0x20, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x54, 0x5f, 0x4d,
	0x61, 0x6e, 0x61, 0x52, 0x65, 0x67, 0x65, 0x6e, 0x5f, 0x54, 0x65, 0x6d, 0x70, 0x10, 0x21, 0x12,
	0x13, 0x0a, 0x0f, 0x4d, 0x54, 0x5f, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x5f, 0x54, 0x65,
	0x6d, 0x70, 0x10, 0x22, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x54, 0x5f, 0x53, 0x74, 0x61, 0x6d, 0x69,
	0x6e, 0x61, 0x52, 0x45, 0x67, 0x65, 0x6e, 0x5f, 0x54, 0x65, 0x6d, 0x70, 0x10, 0x23, 0x12, 0x16,
	0x0a, 0x12, 0x4d, 0x54, 0x5f, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x54, 0x65, 0x6d, 0x70, 0x10, 0x24, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x54, 0x5f, 0x41, 0x77, 0x61,
	0x72, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x54, 0x65, 0x6d, 0x70, 0x10, 0x25, 0x12, 0x0c, 0x0a, 0x08,
	0x4d, 0x54, 0x5f, 0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x10, 0x32, 0x2a, 0x28, 0x0a, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x54, 0x5f, 0x53,
	0x61, 0x76, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x54, 0x5f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x10, 0x01, 0x2a, 0x5a, 0x0a, 0x07, 0x4f, 0x72, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x4f, 0x72, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x72, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53, 0x70, 0x65, 0x6c,
	0x6c, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x72, 0x62, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x53,
	0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x72, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x5f, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x03,
	0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77,
	0x74, 0x69, 0x67, 0x65, 0x72, 0x30, 0x30, 0x31, 0x2f, 0x66, 0x70, 0x32, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_models_proto_rawDescOnce sync.Once
	file_models_proto_rawDescData = file_models_proto_rawDesc
)

func file_models_proto_rawDescGZIP() []byte {
	file_models_proto_rawDescOnce.Do(func() {
		file_models_proto_rawDescData = protoimpl.X.CompressGZIP(file_models_proto_rawDescData)
	})
	return file_models_proto_rawDescData
}

var file_models_proto_enumTypes = make([]protoimpl.EnumInfo, 16)
var file_models_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_models_proto_goTypes = []interface{}{
	(AttributeAllocationMethod)(0),   // 0: fp2.AttributeAllocationMethod
	(EntityType)(0),                  // 1: fp2.EntityType
	(PrimaryAttributeVal)(0),         // 2: fp2.PrimaryAttributeVal
	(AttackType)(0),                  // 3: fp2.AttackType
	(DefenseType)(0),                 // 4: fp2.DefenseType
	(WoundState)(0),                  // 5: fp2.WoundState
	(Rarity)(0),                      // 6: fp2.Rarity
	(BooleanValue)(0),                // 7: fp2.BooleanValue
	(MonetaryDenomination)(0),        // 8: fp2.MonetaryDenomination
	(GameTermType)(0),                // 9: fp2.GameTermType
	(Quality)(0),                     // 10: fp2.Quality
	(ActionType)(0),                  // 11: fp2.ActionType
	(ReferenceType)(0),               // 12: fp2.ReferenceType
	(ModificationType)(0),            // 13: fp2.ModificationType
	(UpdateType)(0),                  // 14: fp2.UpdateType
	(OrbType)(0),                     // 15: fp2.OrbType
	(*Fp2Message)(nil),               // 16: fp2.Fp2Message
	(*Character)(nil),                // 17: fp2.Character
	(*Affinty)(nil),                  // 18: fp2.Affinty
	(*CharacterCreation)(nil),        // 19: fp2.CharacterCreation
	(*CharacterMetadata)(nil),        // 20: fp2.CharacterMetadata
	(*Game)(nil),                     // 21: fp2.Game
	(*GameSession)(nil),              // 22: fp2.GameSession
	(*ChatLog)(nil),                  // 23: fp2.ChatLog
	(*DiceRollLog)(nil),              // 24: fp2.DiceRollLog
	(*Encounter)(nil),                // 25: fp2.Encounter
	(*EntityReference)(nil),          // 26: fp2.EntityReference
	(*InitiativeOrder)(nil),          // 27: fp2.InitiativeOrder
	(*ChallengeDiceRoll)(nil),        // 28: fp2.ChallengeDiceRoll
	(*ChallengeDiceRollResult)(nil),  // 29: fp2.ChallengeDiceRollResult
	(*PlayerOptions)(nil),            // 30: fp2.PlayerOptions
	(*CharacterOptions)(nil),         // 31: fp2.CharacterOptions
	(*CharacterAttributes)(nil),      // 32: fp2.CharacterAttributes
	(*PrimaryAttribute)(nil),         // 33: fp2.PrimaryAttribute
	(*ConsumableAttribute)(nil),      // 34: fp2.ConsumableAttribute
	(*CalculatedValue)(nil),          // 35: fp2.CalculatedValue
	(*Attack)(nil),                   // 36: fp2.Attack
	(*AttackResult)(nil),             // 37: fp2.AttackResult
	(*DefenseChallenge)(nil),         // 38: fp2.DefenseChallenge
	(*DefenseChallengeResponse)(nil), // 39: fp2.DefenseChallengeResponse
	(*DefenseOption)(nil),            // 40: fp2.DefenseOption
	(*CharacterHealth)(nil),          // 41: fp2.CharacterHealth
	(*Skill)(nil),                    // 42: fp2.Skill
	(*CalculatedCharacterSkill)(nil), // 43: fp2.CalculatedCharacterSkill
	(*RefSkill)(nil),                 // 44: fp2.RefSkill
	(*Ability)(nil),                  // 45: fp2.Ability
	(*MonetaryAmount)(nil),           // 46: fp2.MonetaryAmount
	(*IconPicture)(nil),              // 47: fp2.IconPicture
	(*RefWeapon)(nil),                // 48: fp2.RefWeapon
	(*RefGameTerm)(nil),              // 49: fp2.RefGameTerm
	(*Weapon)(nil),                   // 50: fp2.Weapon
	(*RefArmor)(nil),                 // 51: fp2.RefArmor
	(*Armor)(nil),                    // 52: fp2.Armor
	(*DiceRollResults)(nil),          // 53: fp2.DiceRollResults
	(*DiceRollResult)(nil),           // 54: fp2.DiceRollResult
	(*DieRollResult)(nil),            // 55: fp2.DieRollResult
	(*DiceRoll)(nil),                 // 56: fp2.DiceRoll
	(*Die)(nil),                      // 57: fp2.Die
	(*RollModifier)(nil),             // 58: fp2.RollModifier
	(*PerformAction)(nil),            // 59: fp2.PerformAction
	(*ReferenceRequest)(nil),         // 60: fp2.ReferenceRequest
	(*ReferenceResponse)(nil),        // 61: fp2.ReferenceResponse
	(*Modification)(nil),             // 62: fp2.Modification
	(*BatchUpdateRequest)(nil),       // 63: fp2.BatchUpdateRequest
	(*UpdateRequest)(nil),            // 64: fp2.UpdateRequest
	(*ModelChangedEvent)(nil),        // 65: fp2.ModelChangedEvent
	(*Orb)(nil),                      // 66: fp2.Orb
	(*RefOrb)(nil),                   // 67: fp2.RefOrb
}
var file_models_proto_depIdxs = []int32{
	17, // 0: fp2.Fp2Message.Character:type_name -> fp2.Character
	36, // 1: fp2.Fp2Message.Attack:type_name -> fp2.Attack
	37, // 2: fp2.Fp2Message.AttackResult:type_name -> fp2.AttackResult
	38, // 3: fp2.Fp2Message.DefenseChallenge:type_name -> fp2.DefenseChallenge
	39, // 4: fp2.Fp2Message.DefenseChallengeResponse:type_name -> fp2.DefenseChallengeResponse
	60, // 5: fp2.Fp2Message.ReferenceRequest:type_name -> fp2.ReferenceRequest
	61, // 6: fp2.Fp2Message.ReferenceResponse:type_name -> fp2.ReferenceResponse
	64, // 7: fp2.Fp2Message.UpdateRequest:type_name -> fp2.UpdateRequest
	20, // 8: fp2.Character.Metadata:type_name -> fp2.CharacterMetadata
	31, // 9: fp2.Character.Options:type_name -> fp2.CharacterOptions
	32, // 10: fp2.Character.Attributes:type_name -> fp2.CharacterAttributes
	41, // 11: fp2.Character.Health:type_name -> fp2.CharacterHealth
	42, // 12: fp2.Character.Skills:type_name -> fp2.Skill
	50, // 13: fp2.Character.Weapons:type_name -> fp2.Weapon
	52, // 14: fp2.Character.Armors:type_name -> fp2.Armor
	18, // 15: fp2.Character.Affinities:type_name -> fp2.Affinty
	66, // 16: fp2.Character.Orbs:type_name -> fp2.Orb
	0,  // 17: fp2.CharacterCreation.AttributeAllocationMethod:type_name -> fp2.AttributeAllocationMethod
	46, // 18: fp2.CharacterCreation.StartingMoney:type_name -> fp2.MonetaryAmount
	24, // 19: fp2.GameSession.DiceLog:type_name -> fp2.DiceRollLog
	23, // 20: fp2.GameSession.ChatLog:type_name -> fp2.ChatLog
	53, // 21: fp2.ChatLog.Rolls:type_name -> fp2.DiceRollResults
	53, // 22: fp2.DiceRollLog.Rolls:type_name -> fp2.DiceRollResults
	27, // 23: fp2.Encounter.InitiativeOrders:type_name -> fp2.InitiativeOrder
	26, // 24: fp2.Encounter.Entities:type_name -> fp2.EntityReference
	1,  // 25: fp2.EntityReference.Type:type_name -> fp2.EntityType
	33, // 26: fp2.CharacterAttributes.BOD:type_name -> fp2.PrimaryAttribute
	33, // 27: fp2.CharacterAttributes.WILL:type_name -> fp2.PrimaryAttribute
	33, // 28: fp2.CharacterAttributes.REF:type_name -> fp2.PrimaryAttribute
	33, // 29: fp2.CharacterAttributes.VIT:type_name -> fp2.PrimaryAttribute
	33, // 30: fp2.CharacterAttributes.INT:type_name -> fp2.PrimaryAttribute
	33, // 31: fp2.CharacterAttributes.LUCK:type_name -> fp2.PrimaryAttribute
	33, // 32: fp2.CharacterAttributes.TECH:type_name -> fp2.PrimaryAttribute
	33, // 33: fp2.CharacterAttributes.ATTR:type_name -> fp2.PrimaryAttribute
	33, // 34: fp2.CharacterAttributes.ESS:type_name -> fp2.PrimaryAttribute
	33, // 35: fp2.CharacterAttributes.PER:type_name -> fp2.PrimaryAttribute
	34, // 36: fp2.CharacterAttributes.Mana:type_name -> fp2.ConsumableAttribute
	34, // 37: fp2.CharacterAttributes.Stamina:type_name -> fp2.ConsumableAttribute
	35, // 38: fp2.CharacterAttributes.Initiative:type_name -> fp2.CalculatedValue
	35, // 39: fp2.CharacterAttributes.Awarness:type_name -> fp2.CalculatedValue
	3,  // 40: fp2.Attack.AttackType:type_name -> fp2.AttackType
	36, // 41: fp2.AttackResult.Attack:type_name -> fp2.Attack
	40, // 42: fp2.AttackResult.Defense:type_name -> fp2.DefenseOption
	36, // 43: fp2.DefenseChallenge.Attack:type_name -> fp2.Attack
	40, // 44: fp2.DefenseChallenge.DefenseOptions:type_name -> fp2.DefenseOption
	38, // 45: fp2.DefenseChallengeResponse.Challenge:type_name -> fp2.DefenseChallenge
	40, // 46: fp2.DefenseChallengeResponse.Choice:type_name -> fp2.DefenseOption
	4,  // 47: fp2.DefenseOption.DefenseType:type_name -> fp2.DefenseType
	5,  // 48: fp2.CharacterHealth.CurrentWoundState:type_name -> fp2.WoundState
	42, // 49: fp2.CalculatedCharacterSkill.Skill:type_name -> fp2.Skill
	2,  // 50: fp2.RefSkill.AttributeType:type_name -> fp2.PrimaryAttributeVal
	45, // 51: fp2.RefSkill.Abilities:type_name -> fp2.Ability
	4,  // 52: fp2.RefWeapon.DefenseType:type_name -> fp2.DefenseType
	46, // 53: fp2.RefWeapon.Cost:type_name -> fp2.MonetaryAmount
	6,  // 54: fp2.RefWeapon.Rarity:type_name -> fp2.Rarity
	47, // 55: fp2.RefWeapon.Picture:type_name -> fp2.IconPicture
	62, // 56: fp2.RefWeapon.Modifications:type_name -> fp2.Modification
	10, // 57: fp2.Weapon.Quality:type_name -> fp2.Quality
	47, // 58: fp2.Weapon.Picture:type_name -> fp2.IconPicture
	62, // 59: fp2.Weapon.Modifications:type_name -> fp2.Modification
	46, // 60: fp2.RefArmor.Cost:type_name -> fp2.MonetaryAmount
	62, // 61: fp2.RefArmor.Modifications:type_name -> fp2.Modification
	47, // 62: fp2.Armor.Picture:type_name -> fp2.IconPicture
	10, // 63: fp2.Armor.Quality:type_name -> fp2.Quality
	7,  // 64: fp2.Armor.CanDegrade:type_name -> fp2.BooleanValue
	62, // 65: fp2.Armor.Modifications:type_name -> fp2.Modification
	54, // 66: fp2.DiceRollResults.Rolls:type_name -> fp2.DiceRollResult
	58, // 67: fp2.DiceRollResults.Modifiers:type_name -> fp2.RollModifier
	57, // 68: fp2.DiceRollResult.Dice:type_name -> fp2.Die
	55, // 69: fp2.DiceRollResult.Results:type_name -> fp2.DieRollResult
	57, // 70: fp2.DiceRoll.Dice:type_name -> fp2.Die
	58, // 71: fp2.DiceRoll.Modifiers:type_name -> fp2.RollModifier
	36, // 72: fp2.PerformAction.Attack:type_name -> fp2.Attack
	11, // 73: fp2.PerformAction.ActionType:type_name -> fp2.ActionType
	12, // 74: fp2.ReferenceRequest.Type:type_name -> fp2.ReferenceType
	44, // 75: fp2.ReferenceResponse.Skill:type_name -> fp2.RefSkill
	49, // 76: fp2.ReferenceResponse.GameTerm:type_name -> fp2.RefGameTerm
	48, // 77: fp2.ReferenceResponse.Weapon:type_name -> fp2.RefWeapon
	13, // 78: fp2.Modification.Type:type_name -> fp2.ModificationType
	64, // 79: fp2.BatchUpdateRequest.Updates:type_name -> fp2.UpdateRequest
	14, // 80: fp2.UpdateRequest.Type:type_name -> fp2.UpdateType
	51, // 81: fp2.UpdateRequest.RefArmor:type_name -> fp2.RefArmor
	49, // 82: fp2.UpdateRequest.RefGameTerm:type_name -> fp2.RefGameTerm
	44, // 83: fp2.UpdateRequest.RefSkill:type_name -> fp2.RefSkill
	48, // 84: fp2.UpdateRequest.RefWeapon:type_name -> fp2.RefWeapon
	17, // 85: fp2.UpdateRequest.Character:type_name -> fp2.Character
	25, // 86: fp2.UpdateRequest.Encounter:type_name -> fp2.Encounter
	14, // 87: fp2.ModelChangedEvent.Type:type_name -> fp2.UpdateType
	51, // 88: fp2.ModelChangedEvent.RefArmor:type_name -> fp2.RefArmor
	49, // 89: fp2.ModelChangedEvent.RefGameTerm:type_name -> fp2.RefGameTerm
	44, // 90: fp2.ModelChangedEvent.RefSkill:type_name -> fp2.RefSkill
	48, // 91: fp2.ModelChangedEvent.RefWeapon:type_name -> fp2.RefWeapon
	17, // 92: fp2.ModelChangedEvent.Character:type_name -> fp2.Character
	25, // 93: fp2.ModelChangedEvent.Encounter:type_name -> fp2.Encounter
	15, // 94: fp2.RefOrb.Type:type_name -> fp2.OrbType
	6,  // 95: fp2.RefOrb.Rarity:type_name -> fp2.Rarity
	47, // 96: fp2.RefOrb.Picture:type_name -> fp2.IconPicture
	2,  // 97: fp2.RefOrb.SpellAttributeType:type_name -> fp2.PrimaryAttributeVal
	45, // 98: fp2.RefOrb.Abilities:type_name -> fp2.Ability
	99, // [99:99] is the sub-list for method output_type
	99, // [99:99] is the sub-list for method input_type
	99, // [99:99] is the sub-list for extension type_name
	99, // [99:99] is the sub-list for extension extendee
	0,  // [0:99] is the sub-list for field type_name
}

func init() { file_models_proto_init() }
func file_models_proto_init() {
	if File_models_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_models_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fp2Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Character); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Affinty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterCreation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Game); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiceRollLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Encounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntityReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitiativeOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeDiceRoll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeDiceRollResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimaryAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumableAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculatedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttackResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefenseChallenge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefenseChallengeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefenseOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Skill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalculatedCharacterSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefSkill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonetaryAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IconPicture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefWeapon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefGameTerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Weapon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefArmor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Armor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiceRollResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiceRollResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DieRollResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiceRoll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Die); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollModifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Modification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelChangedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Orb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_models_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefOrb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_models_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Fp2Message_Character)(nil),
		(*Fp2Message_Attack)(nil),
		(*Fp2Message_AttackResult)(nil),
		(*Fp2Message_DefenseChallenge)(nil),
		(*Fp2Message_DefenseChallengeResponse)(nil),
		(*Fp2Message_ReferenceRequest)(nil),
		(*Fp2Message_ReferenceResponse)(nil),
		(*Fp2Message_UpdateRequest)(nil),
	}
	file_models_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*PerformAction_Attack)(nil),
	}
	file_models_proto_msgTypes[45].OneofWrappers = []interface{}{
		(*ReferenceResponse_Skill)(nil),
		(*ReferenceResponse_GameTerm)(nil),
		(*ReferenceResponse_Weapon)(nil),
	}
	file_models_proto_msgTypes[48].OneofWrappers = []interface{}{
		(*UpdateRequest_RefArmor)(nil),
		(*UpdateRequest_RefGameTerm)(nil),
		(*UpdateRequest_RefSkill)(nil),
		(*UpdateRequest_RefWeapon)(nil),
		(*UpdateRequest_Character)(nil),
		(*UpdateRequest_Encounter)(nil),
	}
	file_models_proto_msgTypes[49].OneofWrappers = []interface{}{
		(*ModelChangedEvent_RefArmor)(nil),
		(*ModelChangedEvent_RefGameTerm)(nil),
		(*ModelChangedEvent_RefSkill)(nil),
		(*ModelChangedEvent_RefWeapon)(nil),
		(*ModelChangedEvent_Character)(nil),
		(*ModelChangedEvent_Encounter)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_models_proto_rawDesc,
			NumEnums:      16,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_models_proto_goTypes,
		DependencyIndexes: file_models_proto_depIdxs,
		EnumInfos:         file_models_proto_enumTypes,
		MessageInfos:      file_models_proto_msgTypes,
	}.Build()
	File_models_proto = out.File
	file_models_proto_rawDesc = nil
	file_models_proto_goTypes = nil
	file_models_proto_depIdxs = nil
}
